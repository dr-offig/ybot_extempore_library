(sys:load-preload-check 'ybot_adt)
(define *xtmlib-ybot_adt-loaded* #f)

(impc:aot:suppress-aot-do
 (sys:load "libs/contrib/ybot/ybot_base.xtm"))
(impc:aot:insert-forms
 (sys:load "libs/contrib/ybot/ybot_base.xtm" 'quiet))




;;;;;;;;;;; Pair stuff - extends libs/core/adt.xtm ;;;;;;;;;;;;;;;;

(bind-func first:[!a,Pair{!a,!b}*,!a]*
  (lambda (p a)
    (tset! p 0 a)))

(bind-func second:[!b,Pair{!a,!b}*,!b]*
  (lambda (q b)
    (tset! q 1 b)))



;;;; More generalised associative array with comparator - extends libs/core/adt.xtm ;;;

(bind-func hash_find:[Pair{!w,!v}*,List{Pair{!w,!v}*}*,!w,[bool,!w,!w]*]*
  (lambda (hash key cmp)
    (if (null? hash)
        (convert null)
        (if (cmp (first (car hash)) key)
            (car hash)
            (hash_find (cdr hash) key cmp)))))

(bind-func hash_get:[!v,List{Pair{!w,!v}*}*,!w,[bool,!w,!w]*]*
  (lambda (hash key cmp)
    (if (null? hash)
        (convert null)
        (if (cmp (first (car hash)) key)
            (second (car hash))
            (hash_get (cdr hash) key cmp)))))


(bind-func hash_add:[!v,List{Pair{!w,!v}*}*,!w,[bool,!w,!w]*]*
  (lambda (hash key value cmp)
    (if (null? hash)
        (convert null)
        (set! hash (append hash (list (Pair key value)))))
    value))




(bind-func hash_set:[!v,List{Pair{!w,!v}*}*,!w,!v,[bool,!w,!w]*]*
  "set (or overwrite) value for key in dict (returns the old value)"
  (lambda (hash key value cmp)
    (if (null? hash)
        (convert null)
        (if (cmp (first (car hash)) key)
            (let ((oldval (second (car hash))))
              (tset! (car hash) 1 value)
              oldval)
            (if (null? (cdr hash))
                (begin (append hash (list (Pair key value)))
                       (convert null))
                (hash_set (cdr hash) key value cmp))))))


(define *xtmlib-ybot_adt-loaded* #t)
