;; Include guard
(if (and (defined? '*xtmlib-ybot-audio-file-loaded*) *xtmlib-ybot-audio-file-loaded*)
    (sys:load-escape "ybot_audio_file library already loaded"))
(define *xtmlib-ybot-audio-file-loaded* #f)

(if (not (defined? '*ybot-lib-dir*))
    (sys:load-escape "Set the *ybot-lib-dir* variable before loading this library"))
(sys:load (string-append *ybot-lib-dir* "/ybot_audio_stream.xtm"))

;; Dependencies
;(sys:load "libs/aot-cache/sndfile.xtm")

(bind-val SEEK_SET i32 0)
(bind-val SEEK_CUR i32 1)
(bind-val SEEK_END i32 2)

(bind-alias audiofile_t i8*)


(bind-func YbotAudioFileSource_c:[YbotAudioWindowSource_t,i8*]*
  (lambda (fname)
    (let ((info:SF_INFO* (zalloc))
          (audiofile:audiofile_t (sf_open fname SFM_READ info))
          (start_time:i64 (now)))
      (if (null? audiofile)
          (begin
            (println "soundfile error:" (sf_strerror audiofile))
            silent_source)
          ;; when sf_open has read the file without error
          (let ((frames (sf_frames info))
                (channels (i32toi64 (sf_channels info)))
                (samplerate (i32tof (sf_samplerate info))))
            (if (<> samplerate (convert SAMPLERATE))
                (println "File samplerate" samplerate "doesn't match the current audio samplerate" SR ) void)
            (let* ((frames_read 0)
                   (current_read_frame 0))
              (lambda (time:i64 size:i64 channels:i64 output:SAMPLE*)
                (sf_seek audiofile (- time start_time)  SEEK_SET)
                (set! frames_read (sf_readf audiofile output size))
                (set! current_read_frame (+ current_read_frame frames_read))
                (= frames_read size))))))))


(bind-func YbotAudioFileStream_c:[YbotAudioWindowSource_t,i8*]* 40000000
  (lambda (path)
    (let ((filesource (YbotAudioFileSource_c path)))
      (YbotAudioStream_c filesource 1000000 (filesource.channels:i64)))))


(bind-func hernandez (YbotAudioFileStream_c "/Users/s2805534/Music/iTunes/iTunes Media/Music/Absolute Music/Absolute Disco Classics [Disc 1]/1-07 Born To Be Alive.aiff"))

(bind-func dsp:DSPMC
  (let ((compile_time:i64 (now)))
    (crossbows.start_time:i64 compile_time) 
  (lambda (in:float* out:float* time:i64 userData:i8*)
    (hernandez time FRAMES CHANNELS out)
    void)))

(dsp:set! dsp)
