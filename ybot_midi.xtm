(sys:load-preload-check 'ybot_midi)
(define *xtmlib-ybot_midi-loaded* #f)

(impc:aot:suppress-aot-do
 (sys:load "libs/contrib/ybot/ybot_adt.xtm")
 (sys:load "libs/external/portmidi.xtm"))
(impc:aot:insert-forms
 (sys:load "libs/contrib/ybot/adt.xtm" 'quiet)
 (sys:load "libs/external/portmidi.xtm" 'quiet))



;; We want to model the concept of a 'MIDI Device'. Note that PortMIDI doesn't really
;; deal with devices, just with streams. We will bundle together streams according to
;; their name, so that hopefully all the streams (both input and output) that get bundled
;; together into a device correspond to a particular physical box that is plugged in.
;; Of course this get's confusing when MIDI devices are daisy chained via MIDI sockets
;; on the physical device, or via virtual connection in the computers underlying MIDI API.
;; It is entirely possible that these may be bundled together incorrectly. You can however
;; programmatically reconfigure the bundling if you know which stream names should
;; belong together

;; First we need to setup datatypes for input and output ports
;; MIDIInputPort  id, stream pointer, enabled
(bind-type MIDIPort <i32,i8*,i1> (constructor? . #f) (printer? . #f))
(bind-func MIDIPort:[MIDIPort*,i32]*
  (lambda (id:i32)
    (let ((output:MIDIPort* (alloc)))
      (tset! output 0 id)
      (tset! output 1 null)
      (tset! output 2 #f)
      output)))

(bind-func MIDIPort:[MIDIPort*,i32,i8*]*
  (lambda (id:i32 strm:i8*)
    (let ((output:MIDIPort* (alloc)))
      (tset! output 0 id)
      (tset! output 1 strm)
      (tset! output 2 #f)
      output)))

(bind-func port_id:[i32,MIDIPort*]* (lambda (port) (tref port 0)))
(bind-func port_id:[i32,MIDIPort*,i32]* (lambda (port value) (tset! port 0 value))) 
(bind-func stream:[i8*,MIDIPort*]* (lambda (port) (tref port 1)))
(bind-func stream:[i8*,MIDIPort*,i8*]* (lambda (port value) (tset! port 1 value))) 
(bind-func enabled:[i1,MIDIPort*]* (lambda (port) (tref port 2)))
(bind-func enabled:[i1,MIDIPort*,i1]* (lambda (port value) (tset! port 2 value))) 

;; (bind-func toString:[String*,MIDIPort*]*
;;   (lambda (pt)
;;     (let ((cstr:i8* (alloc 512)))
;;       (sprintf cstr " #%ld [%s] " (port_id pt) (if (enabled pt) "x" "."))
;;       (String cstr))))

(bind-func print:[void,MIDIPort*]*
  (lambda (pt)
    (printf " #%ld [%s] " (port_id pt) (if (enabled pt) "x" "."))
    void))


;; And now a MIDI device is a list of input ports and another list of output ports, and a name
(bind-type MIDIDevice <List{MIDIPort*}*,List{MIDIPort*}*,String*> (constructor? . #f) (printer? . #f))

(bind-func MIDIDevice:[MIDIDevice*,List{MIDIPort*}*,List{MIDIPort*}*,String*]*
  (lambda (input_ports output_ports name)
    (let ((md:MIDIDevice* (alloc)))
      (tfill! md input_ports output_ports name)
      md)))

(bind-func input_ports:[List{MIDIPort*}*,MIDIDevice*]* (lambda (device) (tref device 0)))
(bind-func input_ports:[List{MIDIPort*}*,MIDIDevice*,List{MIDIPort*}*]* (lambda (device value) (tset! device 0 value)))
(bind-func output_ports:[List{MIDIPort*}*,MIDIDevice*]* (lambda (device) (tref device 1)))
(bind-func output_ports:[List{MIDIPort*}*,MIDIDevice*,List{MIDIPort*}*]* (lambda (device value) (tset! device 1 value)))
(bind-func name:[String*,MIDIDevice*]* (lambda (device) (tref device 2)))
(bind-func name:[String*,MIDIDevice*,String*]* (lambda (device value) (tset! device 2 value)))

(bind-func printout:[void,MIDIDevice*]*
  (lambda (dev)
    (let* ((ins:List{MIDIPort*}* (input_ports dev))
           (outs:List{MIDIPort*}* (output_ports dev))
           (portprinter:[void,MIDIPort*]* (lambda (pt:MIDIPort*) (print pt))))
      (println  "----- MIDI Device ---- " (name dev) "")
      (printf "|  Inputs: ") (for-each portprinter ins)
      (printf "\tOutputs:") (for-each portprinter outs)
      (println "                |")
      (println "-------------------------------------------------------")
      (println "")
      void)))

(bind-func print:[void,MIDIDevice*]*
  (lambda (dev)
    (printout dev)))
          

(bind-type MIDIDeviceManager <List{MIDIDevice*}*> (constructor? . #f) (printer? . #f))
(bind-func MIDIDeviceManager:[MIDIDeviceManager*]*
  (lambda ()
    (let ((output:MIDIDeviceManager* (alloc)))
      (tset! output 0 null)
      output)))

(bind-func MIDIDeviceManager:[MIDIDeviceManager*,List{MIDIDevice*}*]*
  (lambda (devices)
    (let ((mdm:MIDIDeviceManager* (alloc)))
      (tset! mdm 0 devices)
      mdm)))

(bind-func devices:[List{MIDIDevice*}*,MIDIDeviceManager*]*
  (lambda (manager) (tref manager 0)))
(bind-func devices:[List{MIDIDevice*}*,MIDIDeviceManager*,List{MIDIDevice*}*]*
  (lambda (manager devs) (tset! manager 0 devs)))

(bind-func printout:[void,MIDIDeviceManager*]*
  (lambda (man)
    (let* ((devs (devices man))
           (device_printer:[void,MIDIDevice*]*
            (lambda (dev) (print dev))))
      (for-each device_printer devs)
      void)))

(bind-func print:[void,MIDIDeviceManager*]*
  (lambda (man)
    (printout man)))


(bind-func get_device_by_name:[MIDIDevice*,MIDIDeviceManager*,String*]*
  (lambda (mdm str)
    (let ((loop
           (lambda (lst)
             (cond
              ((non-empty lst)
               (cond
                ((equal str (name (car lst)))
                 (car lst))
                (else (loop (cdr lst)))))
              (else null)))))
      (loop (devices mdm)))))


(bind-func get_input_port_by_name:[MIDIPort*,MIDIDeviceManager*,String*]*
  (lambda (mdm str)
    (let ((dev:MIDIDevice* (get_device_by_name mdm str)))
      (cond
       ((non-null dev)
        (let ((inports (input_ports dev)))
          (cond
           ((non-empty inports)
            (car inports))
           (else null))))
       (else null)))))


(bind-func get_output_port_by_name:[MIDIPort*,MIDIDeviceManager*,String*]*
  (lambda (mdm str)
    (let ((dev:MIDIDevice* (get_device_by_name mdm str)))
      (cond
       ((non-null dev)
        (let ((outports (output_ports dev)))
          (cond
           ((non-empty outports)
            (car outports))
           (else null))))
       (else null)))))


(bind-func get_input_stream:[PmStream*,MIDIDeviceManager*,String*]*
  (lambda (mdm name)
    (let ((port:MIDIPort* (get_input_port_by_name mdm name)))
      (stream port))))


(bind-func get_output_stream:[PmStream*,MIDIDeviceManager*,String*]*
  (lambda (mdm name)
    (let ((port:MIDIPort* (get_output_port_by_name mdm name)))
      (stream port))))

      
;; (bind-func add_all_devices:[void,MIDIDeviceManager*]*
;;   (lambda (mdm)
;;     (let ((ndev (Pm_CountDevices)))
;;       (if (= ndev 0)
;;           (println "No MIDI devices found")
;;           (begin
;;             (println "\n-- Adding MIDI input devices --\n")
;;             (doloop (i ndev)
;;               (if (= (tref (Pm_GetDeviceInfo i) 3) 1)
;;                   (let ((stream (pm_create_input_stream i)))
;;                     (add_input_device mdm stream)
;;                     (println "  device id" i ":" (Pm_GetDeviceInfo i)))))
;;             (println "\n-- Adding MIDI output devices --\n")
;;             (doloop (i ndev)
;;               (if (= (tref (Pm_GetDeviceInfo i) 4) 1)
;;                   (let ((stream (pm_create_output_stream i)))
;;                     (add_output_device mdm stream)
;;                     (println "  device id" i ":" (Pm_GetDeviceInfo i))))))))))




(bind-func pm_print_all_ports
  (lambda ()
    (let ((ndev (Pm_CountDevices)))
      (if (= ndev 0)
          (println "No MIDI ports found")
          (begin
            (println "\n-- MIDI input ports --\n")
            (doloop (i ndev)
              (if (= (tref (Pm_GetDeviceInfo i) 3) 1)
                  (println "  port id" i ":" (Pm_GetDeviceInfo i))))
            (println "\n-- MIDI output ports --\n")
            (doloop (i ndev)
              (if (= (tref (Pm_GetDeviceInfo i) 4) 1)
                  (println "  port id" i ":" (Pm_GetDeviceInfo i)))))))))


(pm_initialize)
(pm_print_all_ports)


(bind-func note_on:[void,PmStream*,i64,i64,i64]*
  (lambda (stream pitch velocity channel)
    (Pm_WriteShort stream 0 (Pm_Message (i64toi32 (+ 144 channel)) (i64toi32 pitch) (i64toi32 velocity)))
    void))

(bind-func note_off:[void,PmStream*,i64,i64]*
  (lambda (stream pitch channel)
    (Pm_WriteShort stream 0 (Pm_Message (i64toi32 (+ 144 channel)) (i64toi32 pitch) (i64toi32 0)))
    void))


(bind-func control_change:[void,PmStream*,i64,i64,i64]*
  (lambda (stream a b channel)
    (Pm_WriteShort stream 0 (Pm_Message (i64toi32 (+ 176 channel)) (i64toi32 a) (i64toi32 b)))
    void))


(bind-func play_note:[void,i64,PmStream*,i64,i64,i64,i64]*
  (lambda (time stream pitch velocity channel duration)
    (callback time note_on:[void,PmStream*,i64,i64,i64]* stream pitch velocity channel)
    (callback (+ time duration) note_off:[void,PmStream*,i64,i64]* stream pitch channel)
    void))

;; (bind-func note_on:[void,PmStream*,i64,i64,i64]*
;;   (lambda (stream pitch velocity channel)
;;     (Pm_WriteShort stream 0 (Pm_Message (i64toi32 (+ 144 channel)) (i64toi32 pitch) (i64toi32 velocity)))
;;     void))

;; (bind-func note_off:[void,PmStream*,i64,i64]*
;;   (lambda (stream pitch channel)
;;     (Pm_WriteShort stream 0 (Pm_Message (i64toi32 (+ 144 channel)) (i64toi32 pitch) (i64toi32 0)))
;;     void))
    
;; (bind-func play_note:[void,i64,PmStream*,i64,i64,i64,i64]*
;;   (lambda (time stream pitch velocity channel duration)
;;     (callback time note_on:[void,PmStream*,i64,i64,i64]* stream pitch velocity channel)
;;     (callback (+ time duration) note_off:[void,PmStream*,i64,i64]* stream pitch channel)
;;     void))


;;(my_play_note (now) (output) 30 100 0 44100)

(bind-func msg_type:[i32,i32]*
  (lambda (s)
    (dtoi32 (round (* (floor (/ (i32tod s) 16.)) 16.)))))

(bind-func msg_chan:[i32,i32]*
  (lambda (s)
    (- s (msg_type s))))

;(msg_chan 145)

(bind-func midi_read_loop_go:[i64]* (lambda () 1))

(bind-func receive_note_on:[void,PmStream*,i32,i32,i32]*
  (lambda (stream pitch velocity channel)
    (println "Note On  port: " stream "  pitch: " pitch "  vel: " velocity)))
    

(bind-func receive_note_off:[void,PmStream*,i32,i32,i32]*
  (lambda (stream pitch velocity channel)
    (println "Note Off  port: " stream "  pitch: " pitch "  vel: " velocity)))


(bind-func receive_cc:[void,PmStream*,i32,i32,i32]*
  (lambda (dev controller value channel)
    (println "CC  port: " dev "  controller: " controller "  value: " value)))


(bind-func receive_aftertouch:[void,PmStream*,i32,i32,i32]*
  (lambda (dev pitch value channel)
    (println "Aftertouch  port: " dev "  pitch: " pitch "  value: " value)))


(bind-func midi_read_loop:[void,i64,double,MIDIDeviceManager*]*
  (let ((input_buffer:PmEvent* (zalloc PM_MIDI_BUFFER_SIZE))
        (read_count 0)
        (i:i32 0) (j:i64 0))
    (lambda (time:i64 delta_t:double mdm:MIDIDeviceManager*)
      (let* ((devs:List{MIDIDevice*}* (devices mdm)) (num:i64 (length devs))
       (process_port:[void,MIDIPort*]*
       (lambda (port:MIDIPort*)
         (let ((this_stream:PmStream* (stream port))
               (active:i1 (enabled port)))
           (if active
               (begin
                 (set! read_count (Pm_Read this_stream input_buffer PM_MIDI_BUFFER_SIZE))
                 ;(println "read_count:" (convert read_count i32))
                 (if (> read_count 0)
                     (dotimes (i read_count)
                       (cond
                        ((= (msg_type (Pm_Message_Status (Pm_Event_Message (pref-ptr input_buffer i)))) MIDI_NOTE_ON)
                         (receive_note_on
                          this_stream
                          (Pm_Message_Data1 (Pm_Event_Message (pref-ptr input_buffer i)))
                          (Pm_Message_Data2 (Pm_Event_Message (pref-ptr input_buffer i)))
                          (msg_chan (Pm_Message_Status (Pm_Event_Message (pref-ptr input_buffer i))))
                          ))
                        ((= (msg_type (Pm_Message_Status (Pm_Event_Message (pref-ptr input_buffer i)))) MIDI_NOTE_OFF)
                         (receive_note_off
                          this_stream
                          (Pm_Message_Data1 (Pm_Event_Message (pref-ptr input_buffer i)))
                          (Pm_Message_Data2 (Pm_Event_Message (pref-ptr input_buffer i)))
                          (msg_chan (Pm_Message_Status (Pm_Event_Message (pref-ptr input_buffer i))))
                          ))
                        ((= (msg_type (Pm_Message_Status (Pm_Event_Message (pref-ptr input_buffer i)))) MIDI_CC)
                         (receive_cc
                          this_stream
                          (Pm_Message_Data1 (Pm_Event_Message (pref-ptr input_buffer i)))
                          (Pm_Message_Data2 (Pm_Event_Message (pref-ptr input_buffer i)))
                          (msg_chan (Pm_Message_Status (Pm_Event_Message (pref-ptr input_buffer i))))
                          ))
                        ((= (msg_type (Pm_Message_Status (Pm_Event_Message (pref-ptr input_buffer i)))) MIDI_POLY_AFTERTOUCH)
                         (receive_aftertouch
                          this_stream
                          (Pm_Message_Data1 (Pm_Event_Message (pref-ptr input_buffer i)))
                          (Pm_Message_Data2 (Pm_Event_Message (pref-ptr input_buffer i)))
                          (msg_chan (Pm_Message_Status (Pm_Event_Message (pref-ptr input_buffer i))))
                          ))
                        (else
                         ;(printf "%d\n" (Pm_Message_Status (Pm_Event_Message (pref-ptr input_buffer i))))
                         ;;(println "midi recv:" i (pref-ptr input_buffer i))
                         void)))
                     void))
               void))))
       (process_devices:[void,List{MIDIDevice*}*]*
        (lambda (lst)
          (cond
           ((non-empty lst)
            (let* ((device:MIDIDevice* (car lst))
                   (ports:List{MIDIPort*}* (input_ports device)))
              (for-each process_port ports)
              (process_devices (cdr lst))))
           (else void)))))
        (process_devices devs))
      (let ((next_time (+ time (convert (* SRd delta_t)))))
        (cond
         ((= (midi_read_loop_go) 1)
          (callback next_time midi_read_loop next_time delta_t mdm)
          void)
         (else void))))))


(bind-func add_input_port:[void,MIDIDeviceManager*,i32]*
  (lambda (mdm n)
    (println "Attempting to open port " n)
    (let* ((strm:PmStream* (pm_create_input_stream n))
           (prt:MIDIPort* (MIDIPort n strm))
           (strname (String (tref (Pm_GetDeviceInfo n) 2)))
           (dev:MIDIDevice* (get_device_by_name mdm strname)))
      (cond
       ((non-null dev)
        (let ((inports (input_ports dev)))
          (input_ports dev (cons prt inports))
          void))
       (else
        (let ((dev:MIDIDevice* (MIDIDevice (list prt) null strname)))
          (devices mdm (cons dev (devices mdm)))
          void))))))


(bind-func add_output_port:[void,MIDIDeviceManager*,i32]*
  (lambda (mdm n)
    (let* ((strm:PmStream* (pm_create_output_stream n))
           (prt:MIDIPort* (MIDIPort n strm))
           (strname (String (tref (Pm_GetDeviceInfo n) 2)))
           (dev:MIDIDevice* (get_device_by_name mdm strname)))
      (cond
       ((non-null dev)
        (let ((outports (output_ports dev)))
          (output_ports dev (cons prt outports))
          void))
       (else
        (let ((dev:MIDIDevice* (MIDIDevice null (list prt) strname)))
          (devices mdm (cons dev (devices mdm)))
          void))))))


(bind-func add_all_ports:[void,MIDIDeviceManager*]*
  (lambda (mdm)
    (let ((ndev:i32 (Pm_CountDevices)) (i:i32 0:i32))
      (dotimes (i ndev)
        (let* ((info:PmDeviceInfo* (Pm_GetDeviceInfo i))
              (inpt:bool (= (tref info 3) 1:i32))
              (otpt:bool (= (tref info 4) 1:i32)))
          (if inpt (add_input_port mdm i))
          (if otpt (add_output_port mdm i))))
      void)))
              
          
(bind-func enable_input_port:[void,MIDIDeviceManager*,String*]*
  (lambda (mdm strname)
    (let ((dev:MIDIDevice* (get_device_by_name mdm strname)))
      (cond
       ((non-null dev)
        (let ((inports:List{MIDIPort*}* (input_ports dev))
              (func:[bool,MIDIPort*]*
               (lambda (pt:MIDIPort*)
                 (enabled pt #t))))
          (for-each func inports) 
          void))
       (else void)))))


(bind-func enable_output_port:[void,MIDIDeviceManager*,String*]*
  (lambda (mdm strname)
    (let ((dev:MIDIDevice* (get_device_by_name mdm strname)))
      (cond
       ((non-null dev)
        (let ((outports:List{MIDIPort*}* (output_ports dev))
              (func:[bool,MIDIPort*]*
               (lambda (pt:MIDIPort*)
                 (enabled pt #t))))
          (for-each func outports) 
          void))
       (else void)))))


(bind-func disable_input_port:[void,MIDIDeviceManager*,String*]*
  (lambda (mdm strname)
    (let ((dev:MIDIDevice* (get_device_by_name mdm strname)))
      (cond
       ((non-null dev)
        (let ((inports:List{MIDIPort*}* (input_ports dev))
              (func:[bool,MIDIPort*]*
               (lambda (pt:MIDIPort*)
                 (enabled pt #f))))
          (for-each func inports) 
          void))
       (else void)))))


(bind-func disable_output_port:[void,MIDIDeviceManager*,String*]*
  (lambda (mdm strname)
    (let ((dev:MIDIDevice* (get_device_by_name mdm strname)))
      (cond
       ((non-null dev)
        (let ((outports:List{MIDIPort*}* (output_ports dev))
              (func:[bool,MIDIPort*]*
               (lambda (pt:MIDIPort*)
                 (enabled pt #f))))
          (for-each func outports) 
          void))
       (else void)))))


(bind-func enable_all_ports_on_device:[void,MIDIDevice*]*
  (lambda (dev)
    (let ((func:[bool,MIDIPort*]*
           (lambda (pt) (enabled pt #t))))
      (for-each func (input_ports dev))
      (for-each func (output_ports dev))
      void)))

(bind-func enable_all_ports:[void,MIDIDeviceManager*]*
  (lambda (mdm)
    (for-each enable_all_ports_on_device (devices mdm))
    void))


(bind-func midi_shazam:[MIDIDeviceManager*]*
  (lambda ()
    (let ((mdm:MIDIDeviceManager* (alloc)))
      (tset! mdm 0 null)
      (add_all_ports mdm)
      ;(disable_all_ports mdm)
      ;(midi_read_loop (now) 0.01 mdm)
      mdm)))


(bind-func midi_start:[void,MIDIDeviceManager*]*
  (lambda (mdm)
    (midi_read_loop (now) 0.01 mdm)
    void))


;; (bind-func note_on:[void,MIDIDevice*,i64,i64,i64]*
;;   (lambda (dev pitch velocity channel)
;;     (let* ((outports:List{MIDIPort*}* (output_ports dev))
;;            (func:[void,MIDIPort*]*
;;             (lambda (pt) (Pm_WriteShort (stream pt) 0 (Pm_Message (i64toi32 (+ 144 channel)) (i64toi32 pitch) (i64toi32 velocity))) void)))
;;       (for-each func outports)
;;     void)))

;; (bind-func note_off:[void,MIDIDevice*,i64,i64]*
;;   (lambda (dev pitch channel)
;;     (let* ((outports:List{MIDIPort*}* (output_ports dev))
;;            (func:[void,MIDIPort*]*
;;             (lambda (pt) (Pm_WriteShort (stream pt) 0 (Pm_Message (i64toi32 (+ 144 channel)) (i64toi32 pitch) (i64toi32 0))) void)))
;;       (for-each func outports)
;;     void)))
    
;; (bind-func play_note:[void,i64,MIDIDevice*,i64,i64,i64,i64]*
;;   (lambda (time dev pitch velocity channel duration)
;;     (callback time note_on:[void,MIDIDevice*,i64,i64,i64]* dev pitch velocity channel)
;;     (callback (+ time duration) note_off:[void,MIDIDevice*,i64,i64]* dev pitch channel)
;;     void))

			
(define *xtmlib-ybot_midi-loaded* #t)
