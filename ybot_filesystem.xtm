;; Include guard
(if (and (defined? '*xtmlib-ybot-filesystem-loaded*) *xtmlib-ybot-filesystem-loaded*)
    (sys:load-escape "ybot_filesystem library already loaded"))
(define *xtmlib-ybot-filesystem-loaded* #f)

;(if (not (defined? '*ybot-lib-dir*))
;    (sys:load-escape "Set the *ybot-lib-dir* variable before loading this library"))
;(sys:load (string-append *ybot-lib-dir* "/ybot_????.xtm"))
(sys:load "libs/core/adt.xtm")
(sys:load "libs/external/apr.xtm")

(bind-macro (@ . args)
            `(pref ,(car args) 0))

 ;; (bind-macro (spack_out . args)
 ;;            `(begin (print ,(cdr args))
 ;;                    ,(car args)))

(bind-macro (spack_out . args)
                    ,(car args))

(bind-val YFS_MAX_LINE_LENGTH i64 8096)

(cond
 ((string=? (sys:platform) "OSX") (bind-val fs i8 47))
 ((string=? (sys:platform) "Linux") (bind-val fs i8 47))
 ((string=? (sys:platform) "Windows") (bind-val fs i8 92)))

(cond
 ((string=? (sys:platform) "OSX") (bind-val return String* (String (let ((s:i8* (zalloc 2))) (pfill! s 10 0) s))))
 ((string=? (sys:platform) "Linux") (bind-val return String* (String (let ((s:i8* (zalloc 2))) (pfill! s 10 0) s))))
 ((string=? (sys:platform) "Windows") (bind-val return String* (String (let ((s:i8* (zalloc 3))) (pfill! s 13 10 0) s)))))

(bind-val slash String*
  (String (let ((s:i8* (zalloc 2))) (pfill! s fs 0) s)))
(bind-val comma String* (String ","))
(bind-val tab String* (String "\t"))



;;;;;;;;;;;;;;;;;;;;; File name utilities ;;;;;;;;;;;;;;;;;;
(bind-func String2ByteList:[List{i8}*,String*]*
  (lambda (str)
    (let* ((n (String_length str))
           (cstr (String_cstr str))
           (loop
            (lambda (i output); ((i n) (output '()))
              (cond
               ((< i 0) output)
               (else (loop (- i 1) (cons (pref cstr i) output)))))))
      (loop (- n 1) '()))))


(bind-func ByteList2String:[String*,List{i8}*]*
  (lambda (lst)
    (let* ((n (length lst))
           (buf:i8* (zalloc (+ n 1)))
           (loop:[void,List{i8}*,i64]*
             (lambda (input i)
               (cond
                ((null? input) (pset! buf i 0) void)
                (else
                 (pset! buf  i (car input)) (loop (cdr input) (+ i 1)) void)))))
      (loop lst 0)
      (String buf))))


(bind-func String_flatten:[String*,List{String*}*]*
  (lambda (lst)
    (let ((mapper:[List{i8}*,String*]*
           (lambda (str) (String2ByteList str))))
      (ByteList2String (flatten (map mapper lst))))))


(bind-func yfs_join:[String*,String*,List{String*}*]*
  (lambda (delimiter:String* components:List{String*}*)
    (let ((n:i64 (length components)) (i:i64 0))
      (dotimes (i (- n 1))
        (insert components (+ (* i 2) 1) delimiter))
      (String_flatten components))))


(bind-func yfs_split:[List{String*}*,i8*]*
  (lambda (full_path)
    (let ((r:i8* (zalloc)))
      (pset! r 0 fs)
      (cdr (regex_split r (String full_path))))))
    
(bind-func yfs_name:[i8*,i8*]*
  (lambda (full_path)
    (String_cstr (car (last (yfs_split full_path))))))
    

($ (cdr (reverse (cdr (yfs_split "/Users/s2805534/Documents/code/extempore/extempore-dev/extempore/libs/external/sndfile.xtm")))))

(bind-func yfs_base:[i8*,i8*]*
  (lambda (full_path)
    (String_cstr (yfs_join slash (reverse (cdr (reverse (yfs_split full_path))))))))


($ (printf "%s" (yfs_base "/Users/s2805534/Documents/code/extempore/extempore-dev/extempore/libs/external/sndfile.xtm")))
($ (print (yfs_split "/Users/s2805534/Documents/code/extempore/extempore-dev/extempore/libs/external/sndfile.xtm")))


(bind-func yfs_file_length:[i64,i8*]*
  (let ((pool:apr_pool_t* (apr_pool_create)))
    (zone_cleanup (apr_pool_destroy pool))
    (lambda (path)
      (let ((info:apr_finfo_t* (salloc)))
        (apr_stat info path APR_FINFO_SIZE pool)
        (tref info 9)))))

(bind-func yfs_open:[apr_file_t*,i8*]*
  (let ((pool:apr_pool_t* (apr_pool_create)))
    (zone_cleanup (apr_pool_destroy pool))
    (lambda (path)
      (let ((handle_ref:apr_file_t** (zalloc)))
        (apr_file_open handle_ref path (+ APR_FOPEN_READ APR_FOPEN_WRITE) APR_FPROT_OS_DEFAULT pool)
        (pref handle_ref 0)))))


(bind-func yfs_close:[apr_status_t,apr_file_t*]*
  (lambda (handle)
    (apr_file_close handle)))


(bind-func yfs_current_playhead:[apr_off_t,apr_file_t*]*
  (let ((playhead_ref:apr_off_t* (zalloc)))
    (lambda (handle)
      (pset! playhead_ref 0 0)
      (apr_file_seek handle APR_CUR playhead_ref)
      (@ playhead_ref))))


(bind-func yfs_file_rewind:[apr_off_t,apr_file_t*]*
  (let ((playhead_ref:apr_off_t* (zalloc)))
    (lambda (handle)
      (pset! playhead_ref 0 0)
      (apr_file_seek handle APR_SET playhead_ref)
      (@ playhead_ref))))


(bind-func yfs_file_seek:[apr_off_t,apr_file_t*,apr_off_t]*
  (let ((playhead_ref:apr_off_t* (zalloc)))
    (lambda (handle index)
      (let*
          ((current (yfs_current_playhead handle))
           (forward:bool (>= index current))
           (style (if forward APR_CUR APR_SET))
           (offset (if forward (- index current) index)))
        (pset! playhead_ref 0 offset)
        (apr_file_seek handle style playhead_ref))
      (@ playhead_ref))))


(bind-func yfs_read_byte:[i8,apr_file_t*,bool*]*
  (let ((c:i8* (zalloc)))
    (lambda (handle pEOF)
      (pset! pEOF 0 (= (apr_file_getc c handle) APR_EOF))
      (@ c))))

(bind-func yfs_peek_byte:[i8,apr_file_t*]*
  (let ((playhead_ref:i64* (zalloc))
        (c:i8* (zalloc)))
    (lambda (handle)
      (apr_file_getc c handle)
      (pset! playhead_ref 0 -1)
      (apr_file_seek handle APR_CUR playhead_ref)
      (@ c))))

(bind-func yfs_read_line:[i8*,apr_file_t*,bool*]*
  (let ((buf:i8* (zalloc (+ YFS_MAX_LINE_LENGTH 1))))
    (lambda (handle pEOF)
      (let*
          ((finish
            (lambda (m:i64)
              (let ((output:i8* (zalloc m)))
                    (set! output (strcpy output buf))
                    output)))
           (loop
            (lambda (n:i64)
              (let ((c:i8 (yfs_read_byte handle pEOF)))
                (if (@ pEOF)
                    (finish n)
                    (begin
                      (cond
                       ((or (= c (i64toi8 10)) (= c (i64toi8 13)))
                        (pset! buf n 0)
                        (let ((d:i8 (yfs_peek_byte handle)))
                          (if (or (= d (i64toi8 10)) (= d (i64toi8 13)))
                              (yfs_read_byte handle pEOF)))
                        (finish n))
                     (else
                      (pset! buf n c)
                      (if (< n YFS_MAX_LINE_LENGTH)
                         (loop (+ n 1))
                         (begin
                           (pset! buf (+ n 1) 0)
                           (finish (+ n 1))))))))))))
        (loop 0)))))
                          
      
        
;;;;;;;;;;;;;;;;;;;;; CRUD BELOW ;;;;;;;;;;;;;;;;;;;;;;;;
;(bind-val EOF i64 -1)


;; (bind-func schmick:[void,i8*]*
;;   (lambda (filepath:i8*)
;;     (let*
;;         ((sz:i64 (* 80 4 200))
;;          (cmd:i8*
;;           (let ((tmp:i8* (zalloc (+ (strlen filepath) 7))))
;;             (strcpy tmp "ls -al ")))
;;          (f (popen (strcat cmd filepath) "r"))
;;          (buf:i8* (salloc sz))
;;          (reader:[void]*
;;           (lambda ()
;;             (let ((c:i64 (i32toi64 (fgetc f))))
;;               (if (<> c EOF)
;;                   (begin
;;                     (printf "%c" (i64toi8 c))
;;                     (reader))
;;                   (begin 
;;                     (printf "\n--------------------------------------------------------\n")
;;                     void))))))
;;       (reader))))
                  

;(schmick ".")


;; (bind-func is_directory:[bool,i8*]*
;;   (lambda (filepath:i8*)
;;     (let*
;;         ((cmd:i8*
;;           (let ((tmp:i8* (zalloc (+ (strlen filepath) 256))))
;;             (strcpy tmp "stat -f %T " )))
;;          (f (popen (strcat cmd filepath) "r")))
;;       (let ((c:i32 (fgetc f)))
;;         (pclose f)
;;         (= c (i64toi32 47))))))
    

;; (is_directory "Wormhole")


;; (bind-func sys_query:[i8*,i8*,i8*]
;;   (lambda (cmd:i8* arg:i8*)
;;     (let* ((block_size:i64 1014)
;;            (output:i8* (zalloc block_size))
;;            (tmp:i8* (salloc (+ (strlen cmd) (strlen arg)))))
;;       (strcpy tmp cmd) (strcat tmp arg)
;;       (let* ((f (popen tmp "r"))
;;              (reader:[void,i8*i64]*
;;               (lambda (buf sz)
;;                 (let ((n (fread buf 1 sz)))
;;                   (if (< n sz)
;;                       output
;;                       (let* ((sz2 (* sz 2))
;;                              (buf2:i8* (zalloc sz2)))
;;                         (memcpy buf2 buf sz)
;;                         (set! output buf2)

;;                         (reader mm)
                            
                    
             
    


  


;; (bind-func descend_into_dir:[bool,i8*]*
;;   (lambda (filepath)
;;     (if (is_directory filepath)
;;         (let (((cmd:i8*
;;           (let ((tmp:i8* (zalloc (+ (strlen dirpath) 5))))
;;             (strcpy tmp "file ")))
;;                (f (popen (strcat cmd dirpath) "r"))))))))



;; (bind-func descend_into_dir:[void,i8*]*
;;   (lambda (dirpath:i8*)
;;     (let*
;;         ((sz:i64 (* 80 4 200))
;;          (cmd:i8*
;;           (let ((tmp:i8* (zalloc (+ (strlen dirpath) 5))))
;;             (strcpy tmp "file ")))
;;          (f (popen (strcat cmd dirpath) "r"))
;;          (buf:i8* (salloc sz))
;;          (reader:[void]*
;;           (lambda ()
;;             (let ((c:i64 (i32toi64 (fgetc f))))
;;               (if (<> c EOF)
;;                   (begin
;;                     (printf "%c" (i64toi8 c))
;;                     (reader))
;;                   (begin 
;;                     (printf "\n--------------------------------------------------------\n")
;;                     void))))))
;;       (reader))))

;; (descend_into_dir ".")

;; (bind-func walk-dir:[void,i8*]*
;;   (lambda (dir)
;;     (file dir)))











;;;;;;;;;; Bollocks below ;;;;;;;;

;; load the libsndfile dynamic library
;(bind-dylib libsndfile
;  (cond ((string=? (sys:platform) "OSX")
;         "libsndfile.dylib")
;        ((string=? (sys:platform) "Linux")
;         "libsndfile.so")
;        ((string=? (sys:platform) "Windows")
;         "libsndfile-1.dll")
;        (else
;         (begin (print-with-colors 'red 'default #f (print "Error"))
;                (print ": unsupported platform ")
;                (print-with-colors 'yellow 'default #f (print (sys:platform)))))))


;(define-macro (os-specific f_osx f_lnx f_win)
;  `(cond ((string=? (sys:platform) "OSX")
;         f_osx)
;        ((string=? (sys:platform) "Linux")
;         f_lnx)
;        ((string=? (sys:platform) "Windows")
;         f_win)
;        (else
;         (begin (print-with-colors 'red 'default #f (print "Error"))
;                (print ": unsupported platform ")
;                (print-with-colors 'yellow 'default #f (print (sys:platform)))))))


;; Already defined in scheme.xtm
;(define sys:file-path-components
;  (lambda (file-path)
;    (let ((base (regex:matched file-path "(.*)[/\\\\](.*)\\.(.*)")))
;      (and (not (null? base))
;           (cdr base)))))

;(define sys:file-path-components-nix
;  (lambda (file-path)
;    (let ((base (regex:matched file-path "(.*)/(.*)\\.(.*)")))
;      (and (not (null? base))
;           (cdr base)))))

;(define sys:file-path-windosify
;  (lambda (file-path)
;    (let ((bits (regex:split file-path "/")))
;      (string-join bits (make-string 1 (integer->char 92))))))

      
;(sys:file-path-components (string-join (list "Users" "s2805534" "Documents" "splergh.xtm")  (make-string 1 (integer->char 92))))

;(sys:file-path-windosify "C:\\My Documents\\blergh")

;(define sys:file-path-components-nix
;  (lambda (file-path)
;    (let ((base (regex:matched file-path "(.*)/(.*)\\.(.*)")))
;      (and (not (null? base))
;           (cdr base)))))

;(regex:matched
; "/Users/s2805534/Documents/code/extempore/extempore-dev/extempore/libs/external/snd\\ file.xtm"
; "(.*)[/\\\\](.*)\\.(.*)")

;(regex:matched
; "\\Users\\s2805534\\Documents\\code\\extempore\\extempore-dev\\extempore\\libs\\external\\sndfile.xtm"
; "(.*)[/\\\\](.*)\\.(.*)")

;(sys:file-path-components-nix "/Users/s2805534/Documents/code/extempore/extempore-dev/extempore/libs/external/sndfile.xtm")
;(sys:file-path-components-nix "\Users\s2805534\Documents\code\extempore\extempore-dev\extempore\libs\external\sndfile.xtm")
;(sys:file-path-windosify "/Users/s2805534/Documents/code/extempore/extempore-dev/extempore/libs/external/sndfile.xtm")


(set! *xtmlib-ybot-filesystem-loaded* #f)
