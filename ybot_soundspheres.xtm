;; Finite Volume Method for numerically solving the acoustic wave equations
(sys:load-preload-check 'ybot_soundspheres)
(define *xtmlib-ybot_soundspheres-loaded* #f)

(impc:aot:suppress-aot-do
 (sys:load "libs/external/gl/gl-objects.xtm")
 (sys:load "libs/external/glfw3.xtm"))
(impc:aot:insert-forms
 (sys:load "libs/external/gl/gl-objects.xtm")
 (sys:load "libs/external/glfw3.xtm"))

;; this function from gl-objects is over-ridden here to suppress logging output
(bind-func VBO_create
  (lambda (buf:float* buflen)
    (let ((vbo:VBO* (halloc))
          (id:GLuint* (salloc)))
      (glGenBuffers 1 id)
      (gl_print_error "Error creating VBO")
      (tfill! vbo
              (pref id 0)
              GL_FLOAT
              (* buflen 4) ;; sizeof(float)
              (cast buf GLvoid*))
      (glBindBuffer GL_ARRAY_BUFFER (VBO_id vbo))
      (glBufferData GL_ARRAY_BUFFER (VBO_size vbo) (VBO_data vbo) GL_STREAM_DRAW)
      (gl_print_error "Error setting VBO data")
      vbo)))

(bind-val PL i32 3600)
;(bind-val SL i32 400)
;; this actually creates the window
(bind-val window GLFWwindow*
  (begin
    (glfwSetErrorCallback (convert (get_native_fptr glfw_error_callback)))
    (glfw_init_and_create_fullscreen_interaction_window)))
;; (bind-val window GLFWwindow*
;;   (begin
;;     (glfwSetErrorCallback (convert (get_native_fptr glfw_error_callback)))
;;     (glfw_init_and_create_interaction_window SL SL)))


;; Once the window is created we can query its properties
(bind-val pixel_ratio float (glfw_get_pixel_ratio window))
(bind-val width float (glfw_get_window_width window))
(bind-val height float (glfw_get_window_height window))
(bind-val w GLuint (ftoi32 width))
(bind-val h GLuint (ftoi32 height))
(bind-val ar float (/ height width))
(bind-val cx float (/ width 2.0:float))
(bind-val cy float (/ height 2.0:float))


;; this is the video frame-rate
(bind-val FRAMERATE float 60.)
(bind-val FRAMEDURATION float (/ 1. FRAMERATE))
(bind-val FRAMEDELTA float (* SAMPLERATE (/ 1. FRAMERATE)))
(bind-func frame_rate:[float,float]*
  (lambda (rate)
    (set! FRAMERATE rate)
    (set! FRAMEDURATION (/ 1. FRAMERATE))
    (set! FRAMEDELTA (* SAMPLERATE (/ 1. FRAMERATE)))
    rate))

;(frame_rate 2.0)


;;;;;;;;; Texture management ;;;;;;;;
(bind-func texture1D_bind_data
  (lambda (tex:Texture data:float* loop:bool size:i32 slot:i32)
    (let ((slot_id:GLenum (+ slot GL_TEXTURE0)))
      (glActiveTexture slot_id)
      (glBindTexture GL_TEXTURE_1D tex)
      (glTexImage1D GL_TEXTURE_1D 0 GL_RGBA32F size 0 GL_RGBA GL_FLOAT (convert data))
      (if loop
        (glTexParameteri GL_TEXTURE_1D GL_TEXTURE_WRAP_S GL_REPEAT)
        (glTexParameteri GL_TEXTURE_1D GL_TEXTURE_WRAP_S GL_CLAMP_TO_BORDER))
      (glTexParameteri GL_TEXTURE_1D GL_TEXTURE_MIN_FILTER GL_LINEAR)
      (glTexParameteri GL_TEXTURE_1D GL_TEXTURE_MAG_FILTER GL_LINEAR)
      (gl_print_error "error in texture1D_bind_data")
      #t)))


(bind-func texture1D_update_data
  (lambda (tex:Texture data:float* loop:bool size:i32 slot:i32)
    (let ((slot_id:GLenum (+ slot GL_TEXTURE0)))
      (glActiveTexture slot_id)
      (glBindTexture GL_TEXTURE_1D tex)
      (glTexSubImage1D GL_TEXTURE_1D 0 0 size GL_RGBA GL_FLOAT (convert data))
      (if loop
        (glTexParameteri GL_TEXTURE_1D GL_TEXTURE_WRAP_S GL_REPEAT)
        (glTexParameteri GL_TEXTURE_1D GL_TEXTURE_WRAP_S GL_CLAMP_TO_BORDER))
      (gl_print_error "error in texture1D_bind_data")
      #t)))


(bind-func texture2D_bind_data_using_slot
  (lambda (tex:Texture data:float* width height chan:i32 slot:i32)
    (let ((slot_id:GLenum (+ slot GL_TEXTURE0))
           (format (cond ((= chan 1) GL_R32F)
                        ((= chan 3) GL_RGB32F)
                        ((= chan 4) GL_RGBA32F)
                        (else 0:i32))))
          (cond
           ((= format 0) (println "Error: only chan must be 1, 3 or 4.") #f)
           (else
            (glActiveTexture slot_id)
            (glBindTexture GL_TEXTURE_2D tex)
            (glTexImage2D GL_TEXTURE_2D 0 GL_RGBA32F width height 0 GL_RGBA GL_FLOAT (convert data))
            ;; set some parameters
            (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_WRAP_S GL_CLAMP_TO_EDGE)
            (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_WRAP_T GL_CLAMP_TO_EDGE)
            (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_MIN_FILTER GL_LINEAR)
            (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_MAG_FILTER GL_LINEAR)
            (gl_print_error "error in texture_bind_image_to_slot")
            #t)))))


(bind-func FBO_load_texture_to_colour_attachment_using_slot:[i32,FBO*,Texture,i32,i32]*
  (lambda (fbo:FBO* tex:Texture attachment:i32 slot:i32)
    (let ((attachment_id:GLenum (+ attachment GL_COLOR_ATTACHMENT0))
          (slot_id:GLenum (+ slot GL_TEXTURE0)))
      (cond
       ((= (glIsTexture tex) GL_TRUE)
        (glActiveTexture slot_id)
        (glBindTexture GL_TEXTURE_2D tex)
        (glBindFramebuffer GL_FRAMEBUFFER (FBO_id fbo))
        (glFramebufferTexture2D GL_FRAMEBUFFER attachment_id GL_TEXTURE_2D tex 0)
        (cond
         ((= (glCheckFramebufferStatus GL_FRAMEBUFFER) GL_FRAMEBUFFER_COMPLETE)
          ;; query the texture for its width and height
          (let ((tw:i32* (salloc)) (th:i32* (salloc)))
            (glGetTexLevelParameteriv GL_TEXTURE_2D 0 GL_TEXTURE_WIDTH tw)
            (glGetTexLevelParameteriv GL_TEXTURE_2D 0 GL_TEXTURE_HEIGHT th)
            ;; fill the FBO tuple with metadata
            (tfill! fbo (FBO_id fbo) tex -1 (pref tw 0) (pref th 0)))
            ;; unbind the frame buffer
            (glBindFramebuffer GL_FRAMEBUFFER 0)
            0:i32)
         (else
          (println "Error loading texture at slot " slot " into framebuffer attachment " attachment)
          (gl_print_error "Error loading texture into framebuffer")
          -2:i32)))
       (else
        (println "Error loading texture into framebuffer: texture " tex " needs to be initialised first")
        (gl_print_error "Error loading texture into framebuffer")
        -1:i32)))))


(bind-val render_slot i32 0)
(bind-val render_tex Texture (Texture_create))
($ (texture2D_bind_data_using_slot render_tex null w h 4 render_slot))



;;; Debugging only ;;;
(bind-func print_point_size
  (lambda ()
    (let ((pVal:float* (salloc)))
      (glGetFloatv GL_POINT_SIZE pVal)
      (printf "GL Point Size: %2.2f\n" (pref pVal 0))
      void)))

(print_point_size)

;;;;;;;;;;;;; Each vertex is a soundsphere ;;;;;;;;;
(bind-val acoustics_vert_data float*)
(bind-val acoustics_vao VAO*)
(bind-val acoustics_vbo VBO*)
(bind-val acoustics_prog ShaderProgram)
(bind-val acoustics_fbo FBO* (FBO_create))
(bind-val c float 0.00343)
;; (bind-val metres_per_pixel float 0.001)
(bind-val PLm float 1.0)
($ (set! c 0.01:float))

(bind-func fnow:[float]*
  (lambda ()
    (/ (i64tof (now)) (/ SRf 1.0:float))))


;;;;; Audio Signal data type - basically a fixed size wavetable, of arbitrary duration, in a particular slot
;; the texture is a 1D texture containing audio sample values (all four components rgba are equal)
(bind-val signal_length i64 1024)
(bind-type Signal <Texture,float,i64> (constructor? . #f) (printer? . #f))
(bind-func Signal:[Signal*,Texture,float,i64]*
  (lambda (tex:Texture duration:float slot:i64)
    (let ((output:Signal* (alloc)))
      (tfill! output tex duration slot)
      output)))
(bind-func Signal_h:[Signal*,Texture,float,i64]*
  (lambda (tex:Texture duration:float slot:i64)
    (let ((output:Signal* (halloc)))
      (tfill! output tex duration slot)
      output)))
(bind-func Signal_create:[Signal*,bool,i64,i64]*
  (lambda (loop size slot)
    (let ((tex:Texture (Texture_create))
          (data:float* (halloc (* 4 size)))
          (i:i64 0) (j:i64 0) (cc:i64 0))
      (dotimes (i size)
        (dotimes (j 4)
          (pset! data cc 0.0:float) (set! cc (+ cc 1))))
      (texture1D_bind_data tex data loop (i64toi32 size) (i64toi32 slot))
      (Signal_h tex 1.0:float slot))))

(bind-func tex:[Texture,Signal*]* (lambda (sig) (tref sig 0)))
(bind-func tex:[Texture,Signal*,Texture]* (lambda (sig value) (tset! sig 0 value)))
(bind-func duration:[float,Signal*]* (lambda (sig) (tref sig 1)))
(bind-func duration:[float,Signal*,float]* (lambda (sig value) (tset! sig 1 value)))
(bind-func slot:[i64,Signal*]* (lambda (sig) (tref sig 2)))
(bind-func slot:[i64,Signal*,i64]* (lambda (sig value) (tset! sig 2 value)))


;;;;; We only need a limited number of signal generators (they can be shared by many point sources)
(bind-val signales Signal** 8)
(bind-val num_signales i64 0)
(bind-func create_signales
  (lambda ()
    (let ((i:i64 0))
      (dotimes (i 8)
        (pset! signales i (Signal_create #t signal_length (+ i 1))))
      void)))
(create_signales)

($ (printf "%ld\n" (tref (pref signales 0) 2)))

                                        ;(bind-val signal1 Texture (Texture_create))
;($ (texture1D_bind_sinewave signal1 100.0 1.0 0.0 signal_length 1))

;(bind-val signal2 Texture (Texture_create))
;($ (texture1D_bind_sinewave signal2 100.0 1.0 0.5 signal_length 2))


(bind-val pi float 3.14159)
(bind-val twopi float 6.283185)
(bind-func sinewave_in_signal:[bool,i64,float,float,float]*
  (lambda (m:i64 freq:float amp:float phase:float)
    (cond
     ((< m 8)
      (let* ((n:i64 signal_length)
             (sig:Signal* (pref signales m))
             (audio_tex:Texture (tex sig))
             (sl:i64 (slot sig))
             (data:float* (alloc (* 4 n)))
             (i:i64 0) (cc:i64 0)
             (d:float (/ 1.0:float (i64tof n))))
        (dotimes (i n)
          (pset! data cc (* amp (sin (* twopi (+ phase (* (/ (i64tof i) (i64tof n)) freq)))))) (set! cc (+ cc 1))
          (pset! data cc (* amp (sin (* twopi (+ phase (* (/ (i64tof i) (i64tof n)) freq)))))) (set! cc (+ cc 1))
          (pset! data cc (* amp (sin (* twopi (+ phase (* (/ (i64tof i) (i64tof n)) freq)))))) (set! cc (+ cc 1))
          (pset! data cc (* amp (sin (* twopi (+ phase (* (/ (i64tof i) (i64tof n)) freq)))))) (set! cc (+ cc 1)))
        (texture1D_update_data audio_tex data #t (i64toi32 n) (i64toi32 sl))
        #t))
     (else
      (println "Cannot use signal slot" m "as there are only 8 slots")
      #f))))
        

(bind-func pulse_train_in_signal:[bool,i64,float,float,float]*
  (lambda (m:i64 freq:float amp:float phase:float)
    (cond
     ((< m 8)
      (let* ((n:i64 signal_length)
             (sig:Signal* (pref signales m))
             (audio_tex:Texture (tex sig))
             (sl:i64 (slot sig))
             (data:float* (alloc (* 4 n)))
             (i:i64 0) (cc:i64 0)
             (d:float (/ 1.0:float (i64tof n)))
             (e:i64 (ftoi64 (round (* (i64tof n) phase)))))
        (dotimes (i n)
          (let* ((g:i64 (i32toi64 (min (abs (i64toi32 (- i e))) (abs (i64toi32 (- (+ e n) i)))))))
            (cond
             ((< g 1000)
              (let ((val:float (* amp (exp (* -1.0:float (/ (* (i64tof g) (i64tof g)) 500.0:float))))))
                (pset! data cc val) (set! cc (+ cc 1))
                (pset! data cc val) (set! cc (+ cc 1))
                (pset! data cc val) (set! cc (+ cc 1))
                (pset! data cc val) (set! cc (+ cc 1))))
             (else
              (pset! data cc 0.0:float) (set! cc (+ cc 1))
              (pset! data cc 0.0:float) (set! cc (+ cc 1))
              (pset! data cc 0.0:float) (set! cc (+ cc 1))
              (pset! data cc 0.0:float) (set! cc (+ cc 1))))))
        (texture1D_update_data audio_tex data #t (i64toi32 n) (i64toi32 sl))
        #t))
     (else
      (println "Cannot use signal slot" m "as there are only 8 slots")
      #f))))
        


;; SignalSource type:  Signal, starttime (ms), loop?, x, y, radius
(bind-type SignalSource <Signal*,float,bool,float,float,float,float> (constructor? . #f) (printer? . #f))
(bind-func SignalSource:[SignalSource*,Signal*,float,bool,float,float,float]*
  (lambda (sig starttime loop x y r)
    (let ((source:SignalSource* (alloc)))
      (tfill! source sig starttime loop x y r)
      source)))

(bind-func SignalSource_h:[SignalSource*,Signal*,float,bool,float,float,float]*
  (lambda (sig starttime loop x y r)
    (let ((source:SignalSource* (halloc)))
      (tfill! source sig starttime loop x y r)
      source)))


(bind-func  signal:[Signal*,SignalSource*]* (lambda (source) (tref source 0)))
(bind-func  signal:[Signal*,SignalSource*,Signal*]* (lambda (source value) (tset! source 0 value)))
;(bind-func  duration:[float,SignalSource*]* (lambda (source) (tref source 1)))
;(bind-func  duration:[float,SignalSource*,float]* (lambda (source value) (tset! source 1 value)))
(bind-func  starttime:[float,SignalSource*]* (lambda (source) (tref source 1)))
(bind-func  starttime:[float,SignalSource*,float]* (lambda (source value) (tset! source 1 value)))
(bind-func  loop:[bool,SignalSource*]* (lambda (source) (tref source 2)))
(bind-func  loop:[bool,SignalSource*,bool]* (lambda (source value) (tset! source 2 value)))
(bind-func  position_x:[float,SignalSource*]* (lambda (source) (tref source 3)))
(bind-func  position_x:[float,SignalSource*,float]* (lambda (source value) (tset! source 3 value)))
(bind-func  position_y:[float,SignalSource*]* (lambda (source) (tref source 4)))
(bind-func  position_y:[float,SignalSource*,float]* (lambda (source value) (tset! source 4 value)))
(bind-func  radius:[float,SignalSource*]* (lambda (source) (tref source 5)))
(bind-func  radius:[float,SignalSource*,float]* (lambda (source value) (tset! source 5 value)))

(bind-func restart:[float,SignalSource*]*
  (lambda (src)
    (starttime src (fnow))))



;;;;;; Now we set up our signal sources
(bind-val sources SignalSource** 2048)
(bind-val num_sources i64 0)

;; (bind-func single_oscillator:[void,float,float,float,float,float,float,i64]*
;;   (lambda (x y r freq amp phase n)
;;     (let ((dur:float (/ 1.0:float freq)))
;;       (texture1D_bind_sinewave (aref signals 0) freq amp phase n 1)
;;       (set! num_signals 1)
;;       (aset! sources 0 (SignalSource_h (aref signals 0) dur (fnow) #t x y r))
;;       (set! num_sources 1)
;;       void)))

;($ (single_oscillator 100.0 100.0 20.0 1.0 1.0 0.0 signal_length))

(bind-func add_sinewave_signal:[i64,float,float,float]*
  (lambda (freq amp phase)
    (let ((dur:float (/ 1.0:float freq)))
      (sinewave_in_signal num_signales freq amp phase)
      (duration (pref signales num_signales) dur)
      (set! num_signales (+ num_signales 1))
      num_signales)))


(bind-func add_pulse_train_signal:[i64,float,float,float]*
  (lambda (freq amp phase)
    (let ((dur:float (/ 1.0:float freq)))
      (pulse_train_in_signal num_signales freq amp phase)
      (duration (pref signales num_signales) dur)
      (set! num_signales (+ num_signales 1))
      num_signales)))



(bind-func add_point_source_to_signal:[void,i64,float,float,float]*
  (lambda (m:i64 x:float y:float r:float)
    (pset! sources num_sources (SignalSource_h (pref signales m) (fnow) #t x y r))
    (set! num_sources (+ num_sources 1))
    void))


(bind-func add_point_sources_to_signal:[void,i64,i64,float*,float*,float*,float*]*
  (lambda (m:i64 num:i64 xs:float*  ys:float* rs:float* phases:float*)
    (let ((i:i64 0) (st:float (fnow)) (sig:Signal* (pref signales m)) (d:float (duration sig)))
      (dotimes (i num) 
        (pset! sources num_sources (SignalSource_h (pref signales m) (+ st (* d (pref phases i))) #t (pref xs i) (pref ys i) (pref rs i)))
        (set! num_sources (+ num_sources 1)))
    void)))


;;;;;;;;;
(add_sinewave_signal 2.0 1.0 0.0)
($ (add_point_source_to_signal 0 cx cy 10.0))
($ (add_point_source_to_signal 0 cx (+ cy 10.0) 10.0))
(add_point_source_to_signal 0 300.0 200.0 20.0)
(add_point_source_to_signal 0 600.0 600.0 20.0)
(add_point_source_to_signal 0 200.0 600.0 10.0)


(bind-func test_setup
  (lambda (m:i64 num:i64 r:float)
    (let ((xs:float* (alloc num))
           (ys:float* (alloc num))
           (rs:float* (alloc num))
           (phases:float* (alloc num))
           (i:i64 0))
      (remove_all_sources)
      (dotimes (i num)
        (pset! xs i (* width (random)))
        (pset! ys i (* height (random)))
        (pset! rs i r)
        (pset! phases i (random)))
      
      (add_point_sources_to_signal m num xs ys rs phases)
      (initialise_acoustics_shaders)
      void)))

(test_setup 0 20 20.0)


(bind-func test_dipole_2
  (lambda (m:i64 r:float d:float)
    (let ((xs:float* (alloc 2))
           (ys:float* (alloc 2))
           (rs:float* (alloc 2))
           (phases:float* (alloc 2)))
      (remove_all_sources)
      (pfill! xs cx (+ cx d))
      (pfill! ys cy cy)
      (pfill! rs r r)
      (pfill! phases 0.0:float 0.5:float)
      (add_point_sources_to_signal m 2 xs ys rs phases)
      (initialise_acoustics_shaders)
      void)))

(test_dipole_2 0 50.0 50.0)
      

(bind-func remove_all_sources
  (lambda ()
    (set! num_sources 0)
    void))

(remove_all_sources)

(bind-func remove_all_signals
  (lambda ()
    (remove_all_sources)
    (set! num_signales 0)
    void))

(remove_all_signals)


(bind-func initialise_acoustics_shaders:[void]*
  (lambda ()
    (set! acoustics_prog
         (ShaderProgram_create
          (sys_slurp_file "/Users/ybot/Documents/code/ybot/ybot_extempore_library/shaders/soundsphere.vert")
          (sys_slurp_file "/Users/ybot/Documents/code/ybot/ybot_extempore_library/shaders/soundsphere.frag")))
    (let ((tmp:float* (alloc (* 7 num_sources))) (i:i64 0) (cc:i64 0))
      (dotimes (i num_sources)
        (let* ((source:SignalSource* (pref sources i))
               (sig:Signal* (signal source))
               (sl:i32 (i64toi32 (slot sig)))
               (stt:float (starttime source))
               (dur:float (duration sig))
               (rad:float (radius source)))
          (pset! tmp cc (- (/ (position_x source) width) 0.5:float)) (set! cc (+ cc 1))
          (pset! tmp cc (- (/ (position_y source) height) 0.5:float)) (set! cc (+ cc 1))
          (pset! tmp cc 0.0) (set! cc (+ cc 1))
          (pset! tmp cc (i32tof sl)) (set! cc (+ cc 1))
          (pset! tmp cc stt) (set! cc (+ cc 1))
          (pset! tmp cc dur) (set! cc (+ cc 1))
          (pset! tmp cc rad) (set! cc (+ cc 1))))
          
      (set! acoustics_vbo (VBO_create tmp (* 7 num_sources)))
      (set! acoustics_vao (VAO_create))
      (VAO_bind_attribute acoustics_vao acoustics_vbo 0 3 7 0)
      (VAO_bind_attribute acoustics_vao acoustics_vbo 1 4 7 3)
      ;(texture_bind_data_using_slot read_tex null L L 4 read_slot)
      ;(texture_bind_data_using_slot render_tex null w h 4 render_slot)
      (FBO_load_texture_to_colour_attachment_using_slot acoustics_fbo render_tex 0 render_slot)
        ;(println (set! acoustics_fbo (FBO_create_with_textures w h #f)))
    void)))


(initialise_acoustics_shaders)


(bind-func line_array:[i64,i64,float]*
  (lambda (n delta)
    (let ((i:i64 0))
      (dotimes (i n)
        (add_point_source_to_signal 0 (+ 200.0 (* (i64tof i) delta)) 200.0 10.0))
      (initialise_acoustics_shaders)
      n)))

;(line_array 20 5.0)



;; (bind-func testn
;;   (lambda (n:i64)
;;     (let ((data:float* (convert (VBO_data acoustics_vbo))))
;;       (println (pref data n))
;;       (pref data n))))
          

;; (bind-func initialise_acoustics_shaders:[void,SignalSource*,i64]*
;;   (lambda (sources positions num)
;;     (set! acoustics_prog
;;          (ShaderProgram_create
;;           (sys_slurp_file "/Users/ybot/Documents/code/ybot/ybot_extempore_library/shaders/soundsphere.vert")
;;           (sys_slurp_file "/Users/ybot/Documents/code/ybot/ybot_extempore_library/shaders/soundsphere.frag")))
;;     (let ((tmp:float* (salloc (* 3 num)))
;;       (pfill! tmp
;;               ;; x     y    z           tex_coord
;;               -1.0   -1.  0.0           0.     0.
;;               -1.0    1.  0.0           0.     1.
;;                1.0   -1.  0.0           1.     0.
;;                1.0    1.  0.0           1.     1.
;;                )
;;     (set! acoustics_vbo (VBO_create tmp 20))
;;     (set! acoustics_vao (VAO_create))
;;     (VAO_bind_attribute acoustics_vao acoustics_vbo 0 3 5 0) ;; normalised device coordinates (x,y) origin at centre
;;     (VAO_bind_attribute acoustics_vao acoustics_vbo 1 2 5 3) ;; texture coordinate (x,y) origin at bottom-left
;;     (Texture_bind_image_to_slot read_tex "/Users/ybot/Documents/code/sketch/extempriments/soundfield.png" 0))
;;     (FBO_load_texture_to_colour_attachment_at_slot acoustics_fbo render_tex 0 1)
;;         ;(println (set! acoustics_fbo (FBO_create_with_textures w h #f)))
;;     void)))

;;;;;;;;; Texture management ;;;;;;;;
;; (bind-func texture2D_bind_data_using_slot
;;   (lambda (tex:Texture data:float* width height chan:i32 slot:i32)
;;     (let ((slot_id:GLenum (+ slot GL_TEXTURE0))
;;            (format (cond ((= chan 1) GL_R32F)
;;                         ((= chan 3) GL_RGB32F)
;;                         ((= chan 4) GL_RGBA32F)
;;                         (else 0:i32))))
;;           (cond
;;            ((= format 0) (println "Error: only chan must be 1, 3 or 4.") #f)
;;            (else
;;             (glActiveTexture slot_id)
;;             (glBindTexture GL_TEXTURE_2D tex)
;;             (glTexImage2D GL_TEXTURE_2D 0 GL_RGBA32F width height 0 GL_RGBA GL_FLOAT (convert data))
;;             ;; set some parameters
;;             (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_WRAP_S GL_CLAMP_TO_EDGE)
;;             (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_WRAP_T GL_CLAMP_TO_EDGE)
;;             (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_MIN_FILTER GL_LINEAR)
;;             (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_MAG_FILTER GL_LINEAR)
;;             (gl_print_error "error in texture_bind_image_to_slot")
;;             #t)))))
                

;; (bind-func texture_bind_image_using_slot
;;   (lambda (tex:Texture filename:i8* slot:i32)
;;     ;; seems to need to be set
;;     (stbi_set_flip_vertically_on_load 1)
;;     (let ((width_ptr:i32* (salloc))
;;           (height_ptr:i32* (salloc))
;;           (comp_ptr:i32* (salloc))
;;           (slot_id:GLenum (+ slot GL_TEXTURE0))
;;           (data (stbi_load filename width_ptr height_ptr comp_ptr 4)))
;;       (cond
;;        ((null? data) (println (stbi_failure_reason)) -1)
;;        (else
;;         (glActiveTexture slot_id)
;;         (glBindTexture GL_TEXTURE_2D tex)
;;         (glTexImage2D GL_TEXTURE_2D 0 GL_RGBA32F (pref width_ptr 0) (pref height_ptr 0) 0 GL_RGBA GL_UNSIGNED_BYTE data)
;;         (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_WRAP_S GL_CLAMP_TO_EDGE)
;;         (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_WRAP_T GL_CLAMP_TO_EDGE)
;;         (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_MIN_FILTER GL_LINEAR)
;;         (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_MAG_FILTER GL_LINEAR)
;;         (gl_print_error "couldn't Texture_bind_image")
;;         (println "Loaded image of width:" (pref width_ptr 0) "and height" (pref height_ptr 0))
;;         tex)))))


;; (bind-func FBO_load_texture_to_colour_attachment_using_slot:[i32,FBO*,Texture,i32,i32]*
;;   (lambda (fbo:FBO* tex:Texture attachment:i32 slot:i32)
;;     (let ((attachment_id:GLenum (+ attachment GL_COLOR_ATTACHMENT0))
;;           (slot_id:GLenum (+ slot GL_TEXTURE0)))
;;       (cond
;;        ((= (glIsTexture tex) GL_TRUE)
;;         (glActiveTexture slot_id)
;;         (glBindTexture GL_TEXTURE_2D tex)
;;         (glBindFramebuffer GL_FRAMEBUFFER (FBO_id fbo))
;;         (glFramebufferTexture2D GL_FRAMEBUFFER attachment_id GL_TEXTURE_2D tex 0)
;;         (cond
;;          ((= (glCheckFramebufferStatus GL_FRAMEBUFFER) GL_FRAMEBUFFER_COMPLETE)
;;           ;; query the texture for its width and height
;;           (let ((tw:i32* (salloc)) (th:i32* (salloc)))
;;             (glGetTexLevelParameteriv GL_TEXTURE_2D 0 GL_TEXTURE_WIDTH tw)
;;             (glGetTexLevelParameteriv GL_TEXTURE_2D 0 GL_TEXTURE_HEIGHT th)
;;             ;; fill the FBO tuple with metadata
;;             (tfill! fbo (FBO_id fbo) tex -1 (pref tw 0) (pref th 0)))
;;             ;; unbind the frame buffer
;;             (glBindFramebuffer GL_FRAMEBUFFER 0)
;;             0:i32)
;;          (else
;;           (println "Error loading texture at slot " slot " into framebuffer attachment " attachment)
;;           (gl_print_error "Error loading texture into framebuffer")
;;           -2:i32)))
;;        (else
;;         (println "Error loading texture into framebuffer: texture " tex " needs to be initialised first")
;;         (gl_print_error "Error loading texture into framebuffer")
;;         -1:i32)))))


;; Use different texture units for different textures
;; (bind-val read_slot i32 0)
;;(bind-val render_slot i32 0)
;; (bind-val still_life_slot i32 2)


;; ($ (texture_bind_data_using_slot read_tex null L L 4 read_slot))
;; ;;($ (texture_bind_image_using_slot read_tex "/Users/ybot/Documents/code/sketch/extempriments/soundfield.png" read_slot))
;; ;;($ (point_source_in_texture_using_slot centres_tex centres_slot))

;; (bind-val render_tex Texture (Texture_create))
;; ($ (texture_bind_data_using_slot render_tex null w h 4 render_slot))

;; (bind-val still_life_tex Texture (Texture_create))
;; ($ (texture_bind_image_using_slot still_life_tex "/Users/ybot/Documents/code/sketch/extempriments/gus.jpg" still_life_slot))




;;;;;;;;;; Preview Shaders ;;;;;;;;;
(bind-val screen_vert_data float*)
(bind-val screen_vao VAO* (VAO_create_ss_quad))
(bind-val screen_vbo VBO*)
(bind-val screen_prog ShaderProgram)

(bind-func initialise_screen_shaders
  (lambda ()
    (set! screen_prog
         (ShaderProgram_create
          (sys_slurp_file "/Users/ybot/Documents/code/ybot/ybot_extempore_library/shaders/visualise_soundfield.vert")
          (sys_slurp_file "/Users/ybot/Documents/code/ybot/ybot_extempore_library/shaders/visualise_soundfield.frag")))
    (let ((tmp:float* (salloc 16)))
      (pfill! tmp
              ;; x     y               tex_coord
              -1.0   -1.              0.     0.
              -1.0    1.              0.     1.
               1.0   -1.              1.     0.
               1.0    1.              1.     1.
               )
    (set! screen_vbo (VBO_create tmp 16))
    (set! screen_vao (VAO_create))
    (VAO_bind_attribute screen_vao screen_vbo 0 2 4 0) ;; normalised device coordinates (x,y) origin at centre
    (VAO_bind_attribute screen_vao screen_vbo 1 2 4 2) ;; texture coordinate (x,y) origin at bottom-left
    void)))


(initialise_screen_shaders)

(bind-func preview_texture2D:[void,Texture]*
  (lambda (tex:Texture)
    (glClampColor GL_CLAMP_READ_COLOR 0:i32)
    (glClearColor 0.0 0.0 0.0 1.0)
    (glBindFramebuffer GL_DRAW_FRAMEBUFFER 0)
    (glClear (bor GL_COLOR_BUFFER_BIT GL_DEPTH_BUFFER_BIT))
    (glUseProgram screen_prog)
    (glActiveTexture GL_TEXTURE0)
    (glBindVertexArray (VAO_id screen_vao))
    (glBindTexture GL_TEXTURE_2D tex)
    (glDrawArrays GL_TRIANGLE_STRIP 0 4)
    (glfwPollEvents)
    (glfwSwapBuffers window)
    void))


;;;;;;;;;;; Preview Sprite ;;;;;;;;;;;
;; (bind-val screen_vert_data float*)
;; (bind-val screen_vao VAO*)
;; (bind-val screen_vbo VBO*)
;; (bind-val screen_prog ShaderProgram)

;; (bind-func initialise_screen_shaders
;;   (lambda ()
;;     (set! screen_prog
;;          (ShaderProgram_create
;;           (sys_slurp_file "/Users/ybot/Documents/code/ybot/ybot_extempore_library/shaders/sprite.vert")
;;           (sys_slurp_file "/Users/ybot/Documents/code/ybot/ybot_extempore_library/shaders/sprite.frag")))
;;     (let ((tmp:float* (salloc 3)))
;;       (pfill! tmp 0.0 0.0 0.0)
;;       (set! screen_vbo (VBO_create tmp 3))
;;       (set! screen_vao (VAO_create))
;;       (VAO_bind_attribute screen_vao screen_vbo 0 3 3 0) ;; normalised device coordinates (x,y,z) origin at centre
;;       void)))


;; (initialise_screen_shaders)


;; (bind-func preview_texture2D_in_slot:[void,Texture,i32]*
;;   (let ((textureLoc (glGetUniformLocation screen_prog "tex")))
;;     (lambda (tex:Texture slot:i32)
;;       (glPointParameteri GL_POINT_SPRITE_COORD_ORIGIN GL_LOWER_LEFT)
;;       (glDisable GL_PROGRAM_POINT_SIZE)
;;       (glPointSize (i32tof L))
;;                                         ;(glClampColor GL_CLAMP_READ_COLOR 0:i32)
;;       (glClearColor 0.0 0.0 0.0 1.0)
;;       (glBindFramebuffer GL_DRAW_FRAMEBUFFER 0)
;;       (glClear (bor GL_COLOR_BUFFER_BIT GL_DEPTH_BUFFER_BIT))
;;       (glUseProgram screen_prog)
;;       (glBindVertexArray (VAO_id screen_vao))
;;       (glActiveTexture (+ GL_TEXTURE0 slot))
;;       (glBindTexture GL_TEXTURE_2D tex)
;;       (glUniform1i textureLoc slot)
;;       (glDrawArrays GL_POINTS 0 1)
;;       (glfwPollEvents)
;;       (glfwSwapBuffers window)
;;     void)))

;; ($ (preview_texture2D_in_slot still_life_tex still_life_slot))

;; (bind-func initialise_acoustics_shaders
;;   (lambda ()
;;     (set! acoustics_prog
;;          (ShaderProgram_create
;;           (sys_slurp_file "/Users/ybot/Documents/code/ybot/ybot_extempore_library/acoustics_compute.vert")
;;           (sys_slurp_file "/Users/ybot/Documents/code/ybot/ybot_extempore_library/acoustics_compute.frag")))
;;     (let ((tmp:float* (salloc 20)))
;;       (pfill! tmp
;;               ;; x     y    z           tex_coord
;;               -1.0   -1.  0.5           0.     0.
;;               -1.0    1.  0.5           0.     1.
;;                1.0   -1.  0.5           1.     0.
;;                1.0    1.  0.5           1.     1.
;;                )
;;     (set! acoustics_vbo (VBO_create tmp 20))
;;     (set! acoustics_vao (VAO_create))
;;     (VAO_bind_attribute acoustics_vao acoustics_vbo 0 3 5 0) ;; normalised device coordinates (x,y) origin at centre
;;     (VAO_bind_attribute acoustics_vao acoustics_vbo 1 2 5 3) ;; texture coordinate (x,y) origin at bottom-left
;;     (Texture_bind_image_to_slot read_tex "/Users/ybot/Documents/code/sketch/extempriments/soundfield.png" 0))
;;     (FBO_load_texture_to_colour_attachment_at_slot acoustics_fbo render_tex 0 1)
;;         ;(println (set! acoustics_fbo (FBO_create_with_textures w h #f)))
;;     void)))




;;;;;;;;;; animation ;;;;;;;;;;
(bind-func draw_frame:[void]*
  (let ((colour_attachment_index:GLenum* (alloc)) (i:i64 0)
        (timeLoc (glGetUniformLocation acoustics_prog "time"))
        (starttimeLoc (glGetUniformLocation acoustics_prog "starttime"))
        (durLoc (glGetUniformLocation acoustics_prog "dur"))
        (driverRadiusLoc (glGetUniformLocation acoustics_prog "driver_radius"))
        (LmLoc (glGetUniformLocation acoustics_prog "Lm"))
        (LLoc (glGetUniformLocation acoustics_prog "L"))
        (cLoc (glGetUniformLocation acoustics_prog "c"))
        (signal0Loc (glGetUniformLocation acoustics_prog "signal0"))
        (signal1Loc (glGetUniformLocation acoustics_prog "signal1"))
        (signal2Loc (glGetUniformLocation acoustics_prog "signal2"))
        (signal3Loc (glGetUniformLocation acoustics_prog "signal3"))
        (signal4Loc (glGetUniformLocation acoustics_prog "signal4"))
        (signal5Loc (glGetUniformLocation acoustics_prog "signal5"))
        (signal6Loc (glGetUniformLocation acoustics_prog "signal6"))
        (signal7Loc (glGetUniformLocation acoustics_prog "signal7"))
        (screenTexLoc (glGetUniformLocation screen_prog "tex")))
    (pset! colour_attachment_index 0 GL_COLOR_ATTACHMENT0)
    (glClampColor GL_CLAMP_READ_COLOR 0:i32)
    (glBindFramebuffer GL_DRAW_FRAMEBUFFER 0)
    ;(glDisable GL_BLEND)
    (lambda ()
      (glEnable GL_BLEND)
      (glBlendFunc GL_ONE GL_ONE)
      (glClampColor GL_CLAMP_READ_COLOR 0:i32)
      (glClearColor 0.0 0.0 0.0 1.0)
      (glPointParameteri GL_POINT_SPRITE_COORD_ORIGIN GL_LOWER_LEFT)
      (glDisable GL_PROGRAM_POINT_SIZE)

      ;; We will render into the first colour attachment of our acoustics framebuffer
      (glBindFramebuffer GL_DRAW_FRAMEBUFFER (FBO_id acoustics_fbo))
      ;;(glBindFramebuffer GL_READ_FRAMEBUFFER (FBO_id acoustics_fbo))
      (glDrawBuffers 1 colour_attachment_index)
      ;(glBindFramebuffer GL_DRAW_FRAMEBUFFER 0)
      (glClear (bor GL_COLOR_BUFFER_BIT GL_DEPTH_BUFFER_BIT))
      ;; and this rendering will sample from our signal texture
      (glUseProgram acoustics_prog)
      (dotimes (i num_signales)
        (let* ((sig:Signal* (pref signales i))
               (sl:i32 (i64toi32 (slot sig)))
               (tx:Texture (tex sig)))
        ;(println "t:" (- (fnow) (starttime src)) "Duration:" (duration src))
          (glActiveTexture (+ GL_TEXTURE0 sl))
          (glBindTexture GL_TEXTURE_1D tx)))

      (glUniform1f timeLoc (fnow))
      (glUniform1f LmLoc PLm)
      (glUniform1f LLoc (i32tof PL))
      (glUniform1f cLoc c)
      (glUniform1i signal0Loc 1:i32)
      (glUniform1i signal1Loc 2:i32)
      (glUniform1i signal2Loc 3:i32)
      (glUniform1i signal3Loc 4:i32)
      (glUniform1i signal4Loc 5:i32)
      (glUniform1i signal5Loc 6:i32)
      (glUniform1i signal6Loc 7:i32)
      (glUniform1i signal7Loc 8:i32)
      
        ;; ;(glPointSize (/ height (i64tof (* 2 num_y))))
      (glPointSize (i32tof PL))
      ;;(glPointSize 2000.0:float)
      (glBindVertexArray (VAO_id acoustics_vao))
      (glClampColor GL_CLAMP_READ_COLOR 0:i32)
      (glDrawArrays GL_POINTS 0 (i64toi32 num_sources))

        ;; ;; Rebind the default buffer, which also unbinds the compute framebuffer
      (glBindFramebuffer GL_DRAW_FRAMEBUFFER 0)

      ;; ;; Copy the rendered texture (render_tex) into the read texture (read_tex)
      ;(glBindFramebuffer GL_READ_FRAMEBUFFER (FBO_id acoustics_fbo))
      ;(glBindTexture GL_TEXTURE_2D accumulator_tex)
      ;(glActiveTexture GL_TEXTURE6)
      ;(glClampColor GL_CLAMP_READ_COLOR 0:i32)
      ;(glCopyTexImage2D GL_TEXTURE_2D 0 GL_RGBA32F 0 0 L L 0)
      
    ;;;;;;; Preview the computed texture on screen ;;;;;;;
      ;; clear the default framebuffer's colour and depth buffers
      (glClearColor 0.0 0.0 0.0 1.0)
      (glClear (bor GL_COLOR_BUFFER_BIT GL_DEPTH_BUFFER_BIT))
    ;; our post-processing shader for the screen-space quad
      (glUseProgram screen_prog)
    ;; bind the screen quad's VAO
      (glBindVertexArray (VAO_id screen_vao))
    ;; bind the chosen texture to display
      ;;(glBindTexture GL_TEXTURE_2D (FBO_color_texture acoustics_fbo))
      (glClampColor GL_CLAMP_READ_COLOR 0:i32)
      (glActiveTexture (+ GL_TEXTURE0 render_slot))
      (glBindTexture GL_TEXTURE_2D render_tex)
      (glUniform1i screenTexLoc render_slot)
      ;(glPointSize (i32tof L))
    ;; draw the quad
      (glDrawArrays GL_TRIANGLE_STRIP 0 4)
      void)))



(bind-func poll_keyboard
  (lambda (window)
    (if (= GLFW_PRESS (glfwGetKey window GLFW_KEY_ENTER))
        (begin
          (println "ENTER pressed")
          (restart (pref sources 0))))
      void))


(bind-func draw_loop
  (let ((go:bool #t) (initialised:bool #f))
    (lambda (time:i64)
      (cond
       (go
        (draw_frame)
        (glfwPollEvents)
        (glfwSwapBuffers window)
        (poll_keyboard window)
        (let ((next_time (+ time (convert FRAMEDELTA))))
          (callback next_time draw_loop next_time)
          void))
       (else void)))))


(bind-func run_graphics:[void,bool]*
  (lambda (flag:bool)
    (cond
     (flag
      (cond
       ((draw_loop.go:bool)
        (cond
         ((draw_loop.initialised:bool)
          void)
         (else
          (draw_loop.initialised:bool #t)
          (draw_loop (now)))))
       (else
        (draw_loop.go:bool #t)
        (draw_loop (now))
        void)))
     (else
      (draw_loop.go:bool #f)
      void))))

(initialise_acoustics_shaders)
(frame_rate 100.0)
($ (run_graphics #t))

(define *xtmlib-ybot_acoustics-loaded* #t)
