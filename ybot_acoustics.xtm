(sys:load-preload-check 'ybot_acoustics)
(define *xtmlib-ybot_acoustics-loaded* #f)

(impc:aot:suppress-aot-do
 (sys:load "libs/external/gl/gl-objects.xtm")
 (sys:load "libs/external/glfw3.xtm"))
(impc:aot:insert-forms
 (sys:load "libs/external/gl/gl-objects.xtm")
 (sys:load "libs/external/glfw3.xtm"))

;; this function from gl-objects is over-ridden here to suppress logging output
(bind-func VBO_create
  (lambda (buf:float* buflen)
    (let ((vbo:VBO* (halloc))
          (id:GLuint* (salloc)))
      (glGenBuffers 1 id)
      (gl_print_error "Error creating VBO")
      (tfill! vbo
              (pref id 0)
              GL_FLOAT
              (* buflen 4) ;; sizeof(float)
              (cast buf GLvoid*))
      (glBindBuffer GL_ARRAY_BUFFER (VBO_id vbo))
      (glBufferData GL_ARRAY_BUFFER (VBO_size vbo) (VBO_data vbo) GL_STREAM_DRAW)
      (gl_print_error "Error setting VBO data")
      vbo)))


;; this actually creates the window
(bind-val window GLFWwindow*
  (begin
    (glfwSetErrorCallback (convert (get_native_fptr glfw_error_callback)))
    (glfw_init_and_create_fullscreen_interaction_window)))
;; (bind-val window GLFWwindow*
;;   (begin
;;     (glfwSetErrorCallback (convert (get_native_fptr glfw_error_callback)))
;;     (glfw_init_and_create_interaction_window 1000 1000)))


;; Once the window is created we can query its properties
(bind-val pixel_ratio float (glfw_get_pixel_ratio window))
(bind-val width float (glfw_get_window_width window))
(bind-val height float (glfw_get_window_height window))
(bind-val w GLuint (ftoi32 width))
(bind-val h GLuint (ftoi32 height))
(bind-val ar float (/ height width))
(bind-val cx float (/ width 2.0:float))
(bind-val cy float (/ height 2.0:float))


;; this is the video frame-rate
(bind-val FRAMERATE float 60.)
(bind-val FRAMEDURATION float (/ 1. FRAMERATE))
(bind-val FRAMEDELTA float (* SAMPLERATE (/ 1. FRAMERATE)))
(bind-func frame_rate:[float,float]*
  (lambda (rate)
    (set! FRAMERATE rate)
    (set! FRAMEDURATION (/ 1. FRAMERATE))
    (set! FRAMEDELTA (* SAMPLERATE (/ 1. FRAMERATE)))
    rate))

;(frame_rate 2.0)


;;;;;;;;; create required textures ;;;;;;;;
(bind-func Texture_bind_data_to_slot
  (lambda (tex:Texture data:float* width height chan:i32 wrap filter slot:i32)
    (let ((slot_id:GLenum (+ slot GL_TEXTURE0))
          (format (cond ((= chan 1) GL_R32F)
                        ((= chan 3) GL_RGB32F)
                        ((= chan 4) GL_RGBA32F)
                        (else 0:i32))))
          (cond
           ((= format 0) (println "Error: only chan must be 1, 3 or 4.") #f)
           (else
            (glActiveTexture slot_id)
            (glBindTexture GL_TEXTURE_2D tex)
            (glTexImage2D GL_TEXTURE_2D 0 format width height 0 format GL_FLOAT (convert data))
                       ;; set some parameters
            (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_WRAP_S wrap)
            (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_WRAP_T wrap)
            (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_MIN_FILTER filter)
            (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_MAG_FILTER filter)
            (gl_print_error "couldn't Texture_bind_image")
            #t)))))
                

(bind-func Texture_bind_image_to_slot
  (lambda (tex:Texture filename:i8* slot:i32)
    ;; seems to need to be set
    (stbi_set_flip_vertically_on_load 1)
    (let ((width_ptr:i32* (salloc))
          (height_ptr:i32* (salloc))
          (comp_ptr:i32* (salloc))
          (white:GLfloat* (salloc 4))
          (slot_id:GLenum (+ slot GL_TEXTURE0))
          (data (stbi_load filename width_ptr height_ptr comp_ptr 4)))
      (cond
       ((null? data) (println (stbi_failure_reason)) -1)
       (else
        (pfill! white 1.0 1.0 1.0 1.0)
        (glActiveTexture slot_id)
        (glBindTexture GL_TEXTURE_2D tex)
        (glTexImage2D GL_TEXTURE_2D 0 GL_RGBA32F (pref width_ptr 0) (pref height_ptr 0) 0 GL_RGBA GL_UNSIGNED_BYTE data)
        (glTexParameterfv GL_TEXTURE_2D GL_TEXTURE_BORDER_COLOR white)
        (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_WRAP_S GL_CLAMP_TO_BORDER)
        (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_WRAP_T GL_CLAMP_TO_BORDER)
        (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_MIN_FILTER GL_NEAREST)
        (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_MAG_FILTER GL_NEAREST)
        (gl_print_error "couldn't Texture_bind_image")
        tex)))))


(bind-func FBO_load_texture_to_colour_attachment_at_slot:[i32,FBO*,Texture,i32,i32]*
  (lambda (fbo:FBO* tex:Texture attachment:i32 slot:i32)
    (let ((attachment_id:GLenum (+ attachment GL_COLOR_ATTACHMENT0))
          (slot_id:GLenum (+ slot GL_TEXTURE0)))
      (cond
       ((= (glIsTexture tex) GL_TRUE)
        (glActiveTexture slot_id)
        (glBindTexture GL_TEXTURE_2D tex)
        (glBindFramebuffer GL_FRAMEBUFFER (FBO_id fbo))
        (glFramebufferTexture2D GL_FRAMEBUFFER attachment_id GL_TEXTURE_2D tex 0)
        (cond
         ((= (glCheckFramebufferStatus GL_FRAMEBUFFER) GL_FRAMEBUFFER_COMPLETE)
          ;; query the texture for its width and height
          (let ((tw:i32* (salloc)) (th:i32* (salloc)))
            (glGetTexLevelParameteriv GL_TEXTURE_2D 0 GL_TEXTURE_WIDTH tw)
            (glGetTexLevelParameteriv GL_TEXTURE_2D 0 GL_TEXTURE_HEIGHT th)
            ;; fill the FBO tuple with metadata
            (tfill! fbo (FBO_id fbo) tex -1 (pref tw 0) (pref th 0)))
            ;; unbind the frame buffer
            (glBindFramebuffer GL_FRAMEBUFFER 0)
            0:i32)
         (else
          (println "Error loading texture at slot " slot " into framebuffer attachment " attachment)
          (gl_print_error "Error loading texture into framebuffer")
          -2:i32)))
       (else
        (println "Error loading texture into framebuffer: texture " tex " needs to be initialised first")
        (gl_print_error "Error loading texture into framebuffer")
        -1:i32)))))


(bind-val squiggle_tex Texture (Texture_create))
($ (Texture_bind_image squiggle_tex "/Users/ybot/Documents/code/sketch/extempriments/squiggle.jpg"))

(bind-val gus_tex Texture (Texture_create))
($ (Texture_bind_image gus_tex "/Users/ybot/Documents/code/sketch/extempriments/gus.jpg"))

(bind-val read_tex Texture (Texture_create))
($ (Texture_bind_image_to_slot read_tex "/Users/ybot/Documents/code/sketch/extempriments/soundfield.png" 0))

(bind-val render_tex Texture (Texture_create))
($ (Texture_bind_image_to_slot render_tex "/Users/ybot/Documents/code/sketch/extempriments/soundfield.png" 1))



;;;;;;;;;;;;;;;;; Acoustics computations in glsl shaders ;;;;;;;;;;;;;;;;;;;
(bind-val acoustics_vert_data float*)
(bind-val acoustics_vao VAO*)
(bind-val acoustics_vbo VBO*)
(bind-val acoustics_prog ShaderProgram)
(bind-val acoustics_fbo FBO* (FBO_create))
(bind-val c float 343.0)
(bind-val metres_per_pixel float 0.001)

(bind-func initialise_acoustics_shaders
  (lambda ()
    (set! acoustics_prog
         (ShaderProgram_create
          (sys_slurp_file "/Users/ybot/Documents/code/ybot/ybot_extempore_library/acoustics_compute.vert")
          (sys_slurp_file "/Users/ybot/Documents/code/ybot/ybot_extempore_library/acoustics_compute.frag")))
    (let ((tmp:float* (salloc 20)))
      (pfill! tmp
              ;; x     y    z           tex_coord
              -1.0   -1.  0.5           0.     0.
              -1.0    1.  0.5           0.     1.
               1.0   -1.  0.5           1.     0.
               1.0    1.  0.5           1.     1.
               )
    (set! acoustics_vbo (VBO_create tmp 20))
    (set! acoustics_vao (VAO_create))
    (VAO_bind_attribute acoustics_vao acoustics_vbo 0 3 5 0) ;; normalised device coordinates (x,y) origin at centre
    (VAO_bind_attribute acoustics_vao acoustics_vbo 1 2 5 3) ;; texture coordinate (x,y) origin at bottom-left
    (Texture_bind_image_to_slot read_tex "/Users/ybot/Documents/code/sketch/extempriments/soundfield.png" 0))
    (FBO_load_texture_to_colour_attachment_at_slot acoustics_fbo render_tex 0 1)
        ;(println (set! acoustics_fbo (FBO_create_with_textures w h #f)))
    void)))

(initialise_acoustics_shaders)
($ (println acoustics_fbo))



;;;;;;;;;; Preview Shaders ;;;;;;;;;
(bind-val screen_vert_data float*)
(bind-val screen_vao VAO* (VAO_create_ss_quad))
(bind-val screen_vbo VBO*)
(bind-val screen_prog ShaderProgram)

(bind-func initialise_screen_shaders
  (lambda ()
    (set! screen_prog
         (ShaderProgram_create
          (sys_slurp_file "/Users/ybot/Documents/code/ybot/ybot_extempore_library/shaders/visualise_soundfield.vert")
          (sys_slurp_file "/Users/ybot/Documents/code/ybot/ybot_extempore_library/shaders/visualise_soundfield.frag")))
    (let ((tmp:float* (salloc 16)))
      (pfill! tmp
              ;; x     y               tex_coord
              -1.0   -1.              0.     0.
              -1.0    1.              0.     1.
               1.0   -1.              1.     0.
               1.0    1.              1.     1.
               )
    (set! screen_vbo (VBO_create tmp 16))
    (set! screen_vao (VAO_create))
    (VAO_bind_attribute screen_vao screen_vbo 0 2 4 0) ;; normalised device coordinates (x,y) origin at centre
    (VAO_bind_attribute screen_vao screen_vbo 1 2 4 2) ;; texture coordinate (x,y) origin at bottom-left
    void)))


(initialise_screen_shaders)

(bind-func preview_texture2D:[void,Texture]*
  (lambda (tex:Texture)
    (glClampColor GL_CLAMP_READ_COLOR 0:i32)
    (glClearColor 0.0 0.0 0.0 1.0)
    (glBindFramebuffer GL_DRAW_FRAMEBUFFER 0)
    (glClear (bor GL_COLOR_BUFFER_BIT GL_DEPTH_BUFFER_BIT))
    (glUseProgram screen_prog)
    (glBindVertexArray (VAO_id screen_vao))
    (glBindTexture GL_TEXTURE_2D tex)
    (glDrawArrays GL_TRIANGLE_STRIP 0 4)
    (glfwPollEvents)
    (glfwSwapBuffers window)
    void))





;;;;; Creating textures to represent boundary conditions ;;;;;
(bind-val ball2D_prog ShaderProgram)
($ (set! ball2D_prog
         (ShaderProgram_create
          (sys_slurp_file "/Users/ybot/Documents/code/ybot/ybot_extempore_library/shaders/ball_2D.vert")
          (sys_slurp_file "/Users/ybot/Documents/code/ybot/ybot_extempore_library/shaders/ball_2D.frag"))))


(bind-func render_ball_2D_colorattachment_slot:[void,Texture,float,float,float,float,i32,i32,i32]*
  (let ((colour_attachment_index:GLenum* (alloc))
        (cxLoc (glGetUniformLocation ball2D_prog "cx"))
        (cyLoc (glGetUniformLocation ball2D_prog "cy"))
        (rLoc (glGetUniformLocation ball2D_prog "r"))
        (valueLoc (glGetUniformLocation ball2D_prog "value"))
        (channelLoc (glGetUniformLocation ball2D_prog "channel")))
    (lambda (tex:Texture x:float y:float r:float value:float channel:i32 attachment:i32 slot:i32)
      (pset! colour_attachment_index 0 (+ GL_COLOR_ATTACHMENT0 attachment))
      (glClampColor GL_CLAMP_READ_COLOR 0:i32)
      (glClearColor 0.0 0.0 1.0 1.0)
      (FBO_load_texture_to_colour_attachment_at_slot acoustics_fbo tex attachment slot)
      (glBindFramebuffer GL_DRAW_FRAMEBUFFER (FBO_id acoustics_fbo))
      (glDrawBuffers 1 colour_attachment_index)
      (glClear (bor GL_COLOR_BUFFER_BIT GL_DEPTH_BUFFER_BIT))
      (glUseProgram ball2D_prog)
      (glUniform1f cxLoc x)
      (glUniform1f cyLoc y)
      (glUniform1f rLoc r)
      (glUniform1f valueLoc value)
      (glUniform1i channelLoc channel)
      (glBindVertexArray (VAO_id acoustics_vao))
      (glDrawArrays GL_TRIANGLE_STRIP 0 4)
      void)))
              

($ (render_ball_2D_colorattachment_slot read_tex (/ width 2.0) (/ height 2.0)  10.0:float 0.75:float 0:i32 1:i32 0:i32))
($ (preview_texture2D render_tex))    
    
;;;;;;;;;; animation ;;;;;;;;;;
(bind-func draw_frame:[void]*
  (let ((colour_attachment_index:GLenum* (alloc))
        (dtauLoc (glGetUniformLocation acoustics_prog "dtau"))
        (mppLoc (glGetUniformLocation acoustics_prog "mpp"))
        (rate:float 1.0))
    (pset! colour_attachment_index 0 GL_COLOR_ATTACHMENT0)
    (glClampColor GL_CLAMP_READ_COLOR 0:i32)
    (glBindFramebuffer GL_DRAW_FRAMEBUFFER 0)
    (lambda ()
      (glClearColor 0.0 0.0 0.0 1.0)
      ;(glDisable GL_PROGRAM_POINT_SIZE)

      ;; We will render into the first colour attachment of our acoustics framebuffer
      (glBindFramebuffer GL_DRAW_FRAMEBUFFER (FBO_id acoustics_fbo))
      (glDrawBuffers 1 colour_attachment_index)
      (glClear (bor GL_COLOR_BUFFER_BIT GL_DEPTH_BUFFER_BIT))
      ;; and this rendering will sample from our read_tex texture
      (glActiveTexture GL_TEXTURE0)
      (glBindTexture GL_TEXTURE_2D read_tex)
      (glUseProgram acoustics_prog)
      (let ((dt:float (* FRAMEDURATION rate)))
        (glUniform1f dtauLoc (convert (* dt c))))
      (glUniform1f mppLoc metres_per_pixel)
      ;; ;(glPointSize (/ height (i64tof (* 2 num_y))))
      ;; ;(glPointSize 1.5)
      (glBindVertexArray (VAO_id acoustics_vao))
      (glDrawArrays GL_TRIANGLE_STRIP 0 4)

      ;; ;; Rebind the default buffer, which also unbinds the compute framebuffer
      (glBindFramebuffer GL_DRAW_FRAMEBUFFER 0)

      ;; ;; Copy the rendered texture (render_tex) into the read texture (read_tex)
      (glBindFramebuffer GL_READ_FRAMEBUFFER (FBO_id acoustics_fbo))
      ;(glBindTexture GL_TEXTURE_2D accumulator_tex)
      ;(glActiveTexture GL_TEXTURE6)
      (glCopyTexImage2D GL_TEXTURE_2D 0 GL_RGBA 0 0 w h 0)
      
    ;;;;;;; Preview the computed texture on screen ;;;;;;;
    ;; clear the default framebuffer's colour and depth buffers
      (glClear (bor GL_COLOR_BUFFER_BIT GL_DEPTH_BUFFER_BIT))
    ;; our post-processing shader for the screen-space quad
      (glUseProgram screen_prog)
    ;; bind the screen quad's VAO
      (glBindVertexArray (VAO_id screen_vao))
    ;; bind the chosen texture to display
      ;;(glBindTexture GL_TEXTURE_2D (FBO_color_texture acoustics_fbo))
      (glBindTexture GL_TEXTURE_2D read_tex)
    ;; draw the quad
      (glDrawArrays GL_TRIANGLE_STRIP 0 4)
      void)))



(bind-func poll_keyboard
  (lambda (window)
      (if (= GLFW_PRESS (glfwGetKey window GLFW_KEY_ENTER))
          (render_ball_2D_colorattachment_slot read_tex (/ width 2.0) (/ height 2.0)  10.0:float 1.0:float 2:i32 1:i32 0:i32))
      void))


(bind-func draw_loop
  (let ((go:bool #t) (initialised:bool #f))
    (lambda (time:i64)
      (cond
       (go
        (draw_frame)
        (glfwPollEvents)
        (glfwSwapBuffers window)
        (poll_keyboard window)
        (let ((next_time (+ time (convert FRAMEDELTA))))
          (callback next_time draw_loop next_time)
          void))
       (else void)))))


(bind-func run_graphics:[void,bool]*
  (lambda (flag:bool)
    (cond
     (flag
      (cond
       ((draw_loop.go:bool)
        (cond
         ((draw_loop.initialised:bool)
          void)
         (else
          (draw_loop.initialised:bool #t)
          (draw_loop (now)))))
       (else
        (draw_loop.go:bool #t)
        (draw_loop (now))
        void)))
     (else
      (draw_loop.go:bool #f)
      void))))

(frame_rate 60.0)
($ (run_graphics #t))

(define *xtmlib-ybot_acoustics-loaded* #t)
