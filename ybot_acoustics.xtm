(sys:load-preload-check 'ybot_acoustics)
(define *xtmlib-ybot_acoustics-loaded* #f)

(impc:aot:suppress-aot-do
 (sys:load "libs/external/gl/gl-objects.xtm")
 (sys:load "libs/external/glfw3.xtm"))
(impc:aot:insert-forms
 (sys:load "libs/external/gl/gl-objects.xtm")
 (sys:load "libs/external/glfw3.xtm"))

;; this function from gl-objects is over-ridden here to suppress logging output
(bind-func VBO_create
  (lambda (buf:float* buflen)
    (let ((vbo:VBO* (halloc))
          (id:GLuint* (salloc)))
      (glGenBuffers 1 id)
      (gl_print_error "Error creating VBO")
      (tfill! vbo
              (pref id 0)
              GL_FLOAT
              (* buflen 4) ;; sizeof(float)
              (cast buf GLvoid*))
      (glBindBuffer GL_ARRAY_BUFFER (VBO_id vbo))
      (glBufferData GL_ARRAY_BUFFER (VBO_size vbo) (VBO_data vbo) GL_STREAM_DRAW)
      (gl_print_error "Error setting VBO data")
      vbo)))


;; this actually creates the window
(bind-val window GLFWwindow*
  (begin
    (glfwSetErrorCallback (convert (get_native_fptr glfw_error_callback)))
    (glfw_init_and_create_fullscreen_interaction_window)))
;; (bind-val window GLFWwindow*
;;   (begin
;;     (glfwSetErrorCallback (convert (get_native_fptr glfw_error_callback)))
;;     (glfw_init_and_create_interaction_window 1000 1000)))


;; Once the window is created we can query its properties
(bind-val pixel_ratio float (glfw_get_pixel_ratio window))
(bind-val width float (glfw_get_window_width window))
(bind-val height float (glfw_get_window_height window))
(bind-val cx float (/ width 2.0:float))
(bind-val cy float (/ height 2.0:float))

;; this is the video frame-rate
(bind-val FRAMERATE float 60.)
(bind-val FRAMEDURATION float (/ 1. FRAMERATE))
(bind-val FRAMEDELTA float (* SAMPLERATE (/ 1. FRAMERATE)))
(bind-func frame_rate:[float,float]*
  (lambda (rate)
    (set! FRAMERATE rate)
    (set! FRAMEDURATION (/ 1. FRAMERATE))
    (set! FRAMEDELTA (* SAMPLERATE (/ 1. FRAMERATE)))
    rate))

;; Setup a vertex array - one vertex per cubic fluid element
(bind-val num_x i64 128)
(bind-val num_y i64 128)
(bind-val num_z i64 128)
(bind-val grid_num i64 (* num_x num_y num_z))
(bind-val grid_vert_data float*)
(bind-val grid_vbo VBO*)
(bind-val grid_vao VAO*)
(bind-val grid_prog ShaderProgram)
(bind-val alpha float 404.0)
(bind-val mm_per_frame float 1.0)

(bind-func grid_coordinate:[float,i64,i64]*
  (lambda (n m)
    (let* ((c:float (/ (i64tof m) 2.0:float))
          (d:float (- (i64tof n) (/ (i64tof m) 2.0:float)))
          (e:float (/ d (i64tof m)))
      
      
      
      
      
    
    

(bind-func initialise_shaders
  (lambda ()
    (set! grid_prog
         (ShaderProgram_create
          (sys_slurp_file "/Users/ybot/Documents/code/ybot/ybot_extempore_library/acoustics.vert")
          (sys_slurp_file "/Users/ybot/Documents/code/ybot/ybot_extempore_library/acoustics.frag")))
    (let ((tmp:float* (alloc (* 7 grid_num))) (i:i64 0) (j:i64 0) (k:i64 0) (cc:i64 0))
      (set! grid_vert_data tmp)
      (dotimes (i num_x)
        (dotimes (j num_y)
          (dotimes (k num_z)
            (pfill!
             (pref-ptr grid_vert_data (* 7 cc))
          ;; x      y      z       (1/rho.c).p    vx   vy   vz
             (/    0.0   0.0                 0.0  0.0  0.0  0.0)
            (set! cc (+ cc 1)))))
             
    ;;(set! mp_vbo (VBO_create (aref-ptr mp_vert_data 0) 5))
    (set! grid_vbo (VBO_create grid_vert_data (* 7 grid_num)))
    (set! grid_vao (VAO_create))
    (VAO_bind_attribute grid_vao grid_vbo 0 3 7 0) ;; position
    (VAO_bind_attribute grid_vao grid_vbo 1 4 7 3) ;; soundfield
    void)))

(initialise_shaders)


(bind-func draw_frame:[void]*
  (let ((timeloc (glGetUniformLocation grid_prog "ct"))
        (screenWidthLoc (glGetUniformLocation grid_prog "screenWidth"))
        (screenHeightLoc (glGetUniformLocation grid_prog "screenHeight"))
        (rate:float (* mm_per_frame 0.001:float))  (ct:float (convert 0.0)))
    (glEnable GL_BLEND)
    (glBlendFunc GL_ONE GL_ONE)
    (glClearColor 0.0 0.0 1.0 1.0)
    (glDisable GL_PROGRAM_POINT_SIZE)
    ;(glPointSize 1000.0)
    (lambda ()
      (set! ct (modulo (+ ct rate) 1.0)) 
      (glClear (bor GL_COLOR_BUFFER_BIT GL_DEPTH_BUFFER_BIT))
      (glUseProgram grid_prog)
      (glUniform1f timeloc (convert ct))
      (glUniform1f screenWidthLoc (convert width))
      (glUniform1f screenHeightLoc (convert height))
      (glPointSize (/ height (i64tof (* 2 num_y))))
      (VAO_bind_and_draw_arrays grid_vao GL_POINTS 0 (i64toi32 grid_num))
      void)))

(bind-func draw_loop
  (let ((go:bool #t) (initialised:bool #f))
    (lambda (time:i64)
      (cond
       (go
        (draw_frame)
        (glfwPollEvents)
        (glfwSwapBuffers window)
        (let ((next_time (+ time (convert FRAMEDELTA))))
          (callback next_time draw_loop next_time)
          void))
       (else void)))))

(bind-func run_graphics:[void,bool]*
  (lambda (flag:bool)
    (cond
     (flag
      (cond
       ((draw_loop.go:bool)
        (cond
         ((draw_loop.initialised:bool)
          void)
         (else
          (draw_loop.initialised:bool #t)
          (draw_loop (now)))))
       (else
        (draw_loop.go:bool #t)
        (draw_loop (now))
        void)))
     (else
      (draw_loop.go:bool #f)
      void))))

($ (run_graphics #f))

(define *xtmlib-ybot_acoustics-loaded* #t)
