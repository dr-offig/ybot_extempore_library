;; Include guard
(if (and (defined? '*xtmlib-ybot-draw-loaded*) *xtmlib-ybot-draw-loaded*)
    (sys:load-escape "ybot_draw library already loaded"))
(define *xtmlib-ybot-draw-loaded* #f)

;(define *ybot-lib-dir* "/Users/s2805534/Dropbox/ybot/src/extempore_libs")
;(if (not (defined? '*ybot-lib-dir*))
;   (sys:load-escape "Set the *ybot-lib-dir* variable before loading this library"))
;(sys:load (string-append *ybot-lib-dir* "/samplerate.xtm"))


;; Required dylibs: libglfw3, libnanovg
(sys:load "libs/external/glfw3.xtm")
(sys:load "libs/core/math.xtm")

(bind-val width float 1280.)
(bind-val height float 800.)

(bind-val window GLFWwindow*
  (begin
    (glfwSetErrorCallback (convert (get_native_fptr glfw_error_callback)))
    (glfw_init_and_create_interaction_window (convert width) (convert height))))

;; Note that we must only load and intitialise nanovg after creating a window
(sys:load "libs/external/nanovg.xtm")

(nvg_init) ;; init nanovg
(bind-val vg NVGcontext* (nvg_create_context))
(bind-val pixel_ratio float (glfw_get_pixel_ratio window))

(bind-val FRAMERATE float 10.)
(bind-val FRAMEDURATION float (/ 1. FRAMERATE))
(bind-val FRAMEDELTA float (* SAMPLERATE (/ 1. FRAMERATE)))

;; (bind-func draw_meter
;;   (lambda (i:i64 n:i64 v:float mn:float mx:float fill:NVGcolor* stroke:NVGcolor*)
;;     (let* ((h:float (/ height (i64tof n)))
;;            (d:float (if (> h 40.) 20. (/ h 2.)))
;;            (r:float (/ d 2.))
;;            (x:float (* width 0.1))
;;            (w:float (* width 0.8))
;;            (t:float (+ x (* w (/ (- v mn) (- mx mn))))) 
;;            (y:float (+ (* height 0.1) (* (* height 0.8) (/ (i64tof i) (i64tof n))))))
;;       (nvgBeginPath vg)
;;       (tfill! fill 1.0 1.0 0.0 1.0)
;;       (nvgRoundedRect vg x y w d r)
;;       (nvgFillColor vg fill)
;;       (nvgFill vg)
;;       (tfill! stroke 0.0 0.0 1.0 1.0)
;;       (nvgStrokeColor vg stroke)
;;       (nvgStroke vg)
;;       (nvgBeginPath vg)
;;       (tfill! fill .0 0.0 1.0 1.0)
;;       ;;(nvgCircle vg (+ t r) (+ y r) r)
;;       (nvgRect vg t y d d)
;;       (nvgFillColor vg fill)
;;       (nvgFill vg))))


;; (bind-func draw_buffer
;;   (lambda (buffer:SAMPLE* frames:i64 channel:i64 fill:NVGcolor* stroke:NVGcolor*)
;;     (let* ((mid_x:float (/ width (convert 2.)))
;;           (mid_y:float (/ height (convert 2.)))
;;           (delta_x:float (/ width (i64tof oscilloscope_buffer_size)))
;;           (half_delta_x:float (/ delta_x (convert 2.)))
;;           (xn:[SAMPLE,i64]*
;;            (lambda (step)
;;              (+ half_delta_x (* delta_x (i64tof step)))))
;;           (i:i64 1))
;;       ;;(nvgRoundedRect vg 0. 0. 100. 100. 5.)
;;       (nvgFillColor vg fill)
;;       (nvgFill vg)
;;       (tfill! stroke 1.0 1.0 1.0 1.0)
;;       (nvgBeginPath vg)
;;       (nvgMoveTo vg (xn cc) (+ mid_y (* mid_y (pref buffer 0))))
;;       (dotimes (i oscilloscope_buffer_size)
;;         (nvgLineTo vg (xn (+ i cc)) (+ mid_y (*  mid_y (pref buffer (+ i cc))))))
;;       (nvgStrokeColor vg stroke)
;;       (nvgStroke vg))))
      

(bind-func draw_frame
  (let ((fill (NVGcolor 0.0 0.0 1.0 0.01))
        (bgc (NVGcolor 0.0 0.0 0.0 0.01))
        (stroke (NVGcolor 0.0 0.0 1.0 0.5))
        (i 0) (n 4))
    (lambda ()
      (nvgBeginFrame vg (convert width) (convert height) pixel_ratio)
      (nvgResetTransform vg)
      (nvgFillColor vg bgc)
      (nvgBeginPath vg)
      (nvgRect vg 0. 0. width height)
      (nvgFill vg)
      (nvgEndFrame vg))))
    



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(bind-func nvg_draw_loop
  (lambda (time:i64 delta:float)
    ;;(nvg_clear)
    (draw_frame)
    (glfwPollEvents)
    (glfwSwapBuffers window)    
    (let ((next_time (+ time (convert delta))))
      (callback next_time nvg_draw_loop next_time delta))))

($ (nvg_draw_loop (now) FRAMEDELTA))


;; to stop the draw loop, eval this version of nvg_draw_loop
;(bind-func nvg_draw_loop
;  (lambda (time:i64 delta:float)
;    (println "nvg_draw_loop callback stopped")
;    void))

(set! *xtmlib-ybot-draw-loaded* #t)
