(if (and (defined? '*xtmlib-ybot-parser-html-loaded*) *xtmlib-ybot-parser-html-loaded*)
    (sys:load-escape "ybot_parser_html library already loaded"))
(define *xtmlib-ybot-parser-html-loaded* #f)

(define *ybot-lib-dir* "/Users/s2805534/Dropbox/ybot/src/extempore_libs")
(if (not (defined? '*ybot-lib-dir*))
    (sys:load-escape "Set the *ybot-lib-dir* variable before loading this library"))
(sys:load (string-append *ybot-lib-dir* "/ybot_filesystem.xtm"))         


;; StringStreamBuffer:  data, length, capacity
(bind-type StringStreamBuffer <i8*,i64,i64>)
(bind-func StringStreamBuffer_c:[StringStreamBuffer*,i64]*
  (lambda (capacity)
    (let ((data:i8* (zalloc (+ capacity 1))))
      (StringStreamBuffer data 0 capacity))))
          
(bind-func StringStreamBuffer_c:[StringStreamBuffer*,StringStreamBuffer*,i64]*
  (lambda (buffer new_capacity)
    (let* ((data (tref buffer 0))
          (current_length (tref buffer 1))
          (current_capacity (tref buffer 2))
          (capacity (min current_capacity new_capacity))
          (new_length (min current_length new_capacity))
          (new_data:i8* (zalloc (+ new_capacity 1)))
          (new_buffer:StringStreamBuffer* (StringStreamBuffer new_data new_length new_capacity)))
      (memcpy new_data data capacity)
      (pset! new_data (+ new_length 1) (i64toi8 0))
      new_buffer)))
    

(bind-func SSB:[StringStreamBuffer*,i8*]*
  (lambda (cstr)
    (let*
        ((current_length (strlen cstr))
         (new_length current_length)
         (new_capacity current_length)
         (new_data:i8* (zalloc (+ new_capacity 1)))
         (new_buffer:StringStreamBuffer* (StringStreamBuffer new_data new_length new_capacity)))
      (memcpy new_data cstr new_length)
      (pset! new_data (+ new_length 1) (i64toi8 0))
      new_buffer)))


(bind-func SSB:[StringStreamBuffer*,i8*,i64]*
  (lambda (cstr new_capacity)
    (let*
        ((current_length (strlen cstr))
         (new_length (min current_length new_capacity))
         (new_data:i8* (zalloc (+ new_capacity 1)))
         (new_buffer:StringStreamBuffer* (StringStreamBuffer new_data new_length new_capacity)))
      (memcpy new_data cstr new_length)
      (pset! new_data (+ new_length 1) (i64toi8 0))
      new_buffer)))


(bind-func SSB:[StringStreamBuffer*,String*,i64]*
  (lambda (str new_capacity)
    (let*
        ((cstr (cstring str))
         (current_length (strlen cstr))
         (new_length (min current_length new_capacity))
         (new_data:i8* (zalloc (+ new_capacity 1)))
         (new_buffer:StringStreamBuffer* (StringStreamBuffer new_data new_length new_capacity)))
      (memcpy new_data cstr new_length)
      (pset! new_data (+ new_length 1) (i64toi8 0))
      new_buffer)))


(bind-func SSBWrite:[StringStreamBuffer*,StringStreamBuffer*,i8]*
  (lambda (buffer c)
    (let ((data (tref buffer 0))
          (current_length (tref buffer 1))
          (capacity (tref buffer 2)))
      (cond
       ((< current_length capacity)
        (pset! data current_length c)
        (pset! data (+ current_length 1) (i64toi8 0))
        (tset! buffer 1 (+ current_length 1))
        buffer)
       (else
        (let* ((new_capacity (* capacity 2))
               (new_buffer (StringStreamBuffer_c buffer new_capacity))
               (new_data (tref new_buffer 0)))
          (pset! new_data current_length c)
          (pset! new_data (+ current_length 1) (i64toi8 0))
          (tset! new_buffer 1 (+ current_length 1))
          new_buffer))))))

          
(bind-func toString:[String*,StringStreamBuffer*]*
  (lambda (buffer)
    (String (tref buffer 0))))

(bind-func cstring:[i8*,StringStreamBuffer*]*
  (lambda (buffer)
    (tref buffer 0)))

(bind-func nontrivial:[bool,StringStreamBuffer*]*
  (lambda (buffer)
    (< 0 (tref buffer 1))))


(bind-func SSBReset:[void,StringStreamBuffer*]*
  (lambda (buffer)
    (memset (tref buffer 0) 0 (tref buffer 2))
    (tset! buffer 1 0)
    void))


;;;;;;;;;;;;;;;; String parsing utilities ;;;;;;;;;;;;;
(bind-func first_word:[String*,String*]*
  (lambda (str)
    (let ((words (regex_split "[^a-zA-Z0-9]+" str)))
      (if (non-empty words)
          (car words)
          null))))
      


;; HTML Tag
;; use 'opaque' i8* for List{HTMLTag*}*
(bind-type HTMLTag <String*,HTMLTag*,i8*,List{Pair{String*,String*}*}*,StringStreamBuffer*> (constructor? . #f) (printer? . #f))

;; provide our own constructor - hide i8* with 'hidden' cast from List{HTMLTag*}* 
(bind-func HTMLTag:[HTMLTag*,String*,HTMLTag*,List{HTMLTag*}*,List{Pair{String*,String*}*}*,StringStreamBuffer*]*
  (lambda (label parent children attributes content)
    (let ((tag:HTMLTag* (alloc)))
      (tfill! tag label parent (cast children i8*) attributes content)
      tag)))

;; getters and setters 
(bind-func label (lambda (tag:HTMLTag*) (tref tag 0)))
(bind-func label (lambda (tag:HTMLTag* label_in:String*) (tset! tag 0 label_in)))
(bind-func parent (lambda (tag:HTMLTag*) (tref tag 1)))
(bind-func parent (lambda (tag:HTMLTag* parent_in:HTMLTag*) (tset! tag 1 parent_in)))
(bind-func children (lambda (tag:HTMLTag*) (cast (tref tag 2) List{HTMLTag*}*)))
(bind-func children (lambda (tag:HTMLTag* children_in:List{HTMLTag*}*) (cast (tset! tag 2 (cast children_in i8*)) List{HTMLTag*}*)))
(bind-func attributes (lambda (tag:HTMLTag*) (tref tag 3)))
(bind-func attributes (lambda (tag:HTMLTag* attrs_in:List{Pair{String*,String*}*}*) (tset! tag 3 attrs_in)))
(bind-func contents (lambda (tag:HTMLTag*) (tref tag 4)))
(bind-func contents (lambda (tag:HTMLTag* contents_in:StringStreamBuffer*) (tset! tag 4 contents_in)))


(bind-val htmlTagOpen i8 (i64toi8 60))
(bind-val htmlTagClose i8 (i64toi8 62))
(bind-val htmlTagSlash i8 (i64toi8 47))
(bind-val htmlTagEscape i8 (i64toi8 37))
(bind-val htmlTagSeparator i8 (i64toi8 32))
(bind-val htmlTagEquals i8 (i64toi8 61))
(bind-val htmlTagDoubleQuote i8 (i64toi8 34))
(bind-val ybotHtmlPlaceHolder i8 (i64toi8 26))


(bind-func parse_html_character_code:[i32,String*]*
  (lambda (code)
    (atoi (tref (substring code 2 (- (length code) 1)) 1))))




(bind-func match_end_tag:[HTMLTag*,HTMLTag*,String*]*
  (lambda (tag label)
    (let* ((loop:[HTMLTag*,HTMLTag*]*
            (lambda (aTag)
              (if (null? aTag)
                  (convert 0)
                  (cond
                   ((equal (tref aTag 0) label)
                    aTag)
                   (else
                    (loop (tref aTag 1))))))))
      (loop tag))))


;; modes
;; 0      normal mode, not in tag label, and not in escape sequence
;; 1      in tag label
;; 2      in escape sequence
;; 3      in tag attributes
;; -3     in tag attribute_value
;; -4     in tag attribute_value literal
;; -5     in tag attribute literal
;; 4      in end tag
;; 5      disambiguating tag label, from end tag


(bind-func parse_html_branch:[HTMLTag*,HTMLTag*,StringStreamBuffer*,i64,[i8,bool*]*,bool*]*
  (let ((end_label (StringStreamBuffer_c 256))
        (attribute_name (StringStreamBuffer_c 256))
        (attribute_value (StringStreamBuffer_c 256))) 
  (lambda (tag child_label mode char_stream eof)
    (let ((parent (tref tag 1))
          (content (tref tag 4))
          (c:i8 (char_stream eof)))
      ;;(printf "%c" c)
      (if (@ eof)
          tag
          (cond
           ((= mode 5) ;; disambiguating tag label from end tag
            (cond
             ((= c htmlTagSlash)    ;; this is an end tag
              (parse_html_branch tag child_label 4 char_stream eof))
             (else
              (set! child_label (SSBWrite child_label c))
              ;;(printf "\nForming tag label: %c" c)
              (parse_html_branch tag child_label 1 char_stream eof))))
           ((= mode 0) ;; normal mode, not in tag label, not in end tag, not in escape sequence
            (cond
             ((= c htmlTagOpen)
              (parse_html_branch tag child_label 5 char_stream eof))
             ((= c htmlTagClose)
              (println "Error: unbalanced '>'")
              (convert null))
             ((= c htmlTagEscape)
              (parse_html_branch tag child_label 2 char_stream eof))
             ((= c ybotHtmlPlaceHolder)
              (set! content (SSBWrite content htmlTagEscape))
              (set! content (SSBWrite content c))
              (parse_html_branch tag child_label 0 char_stream eof))
             (else
              (set! content (SSBWrite content c))
              (parse_html_branch tag child_label 0 char_stream eof))))
           ((= mode 1) ;; in tag label
            (cond
             ((= c htmlTagClose) ;;  create a new tag object
              ;;(printf "... \n [----Tag label is %s ----]\n ..." (tref child_label 0))
              (let ((child:HTMLTag* (HTMLTag (toString child_label) tag (convert null) (convert null) (StringStreamBuffer_c 256)))
                    (grandchild_label (StringStreamBuffer_c 256)))
                (SSBReset child_label) (SSBReset attribute_name) (SSBReset attribute_value)
                ;;(printf "Adding child %s to %s ...\n" (cstring (label child)) (cstring (label tag)))
                (children tag (cons child (children tag)))
                (set! content (SSBWrite content ybotHtmlPlaceHolder))
                (parse_html_branch child grandchild_label 0 char_stream eof)
                (parse_html_branch tag child_label 0 char_stream eof)))
             ((= c htmlTagSeparator)
              ;;(printf "\nForming attribute name: ")
              (parse_html_branch tag child_label 3 char_stream eof))
             (else
              ;(printf "%c" c)
              (set! child_label (SSBWrite child_label c))
              (parse_html_branch tag child_label 1 char_stream eof))))
           ((= mode 2) ;; In escape sequence - write this character literally to the content, unless it is the special character '#', in which case precede with '\'
            (if (= c ybotHtmlPlaceHolder)
                (set! content (SSBWrite content htmlTagEscape)))
            (set! content (SSBWrite content c))
            (parse_html_branch tag child_label 0 char_stream eof))
           ((= mode 4) ;; in end tag
            (cond
             ((= c htmlTagClose) ;; closing an end tag, find which open tag corresponds and finalise
              ;(printf "... \n [----End label is %s ----]\n ..." (tref end_label 0))
              (let* ((closing_tag:HTMLTag* (match_end_tag tag (toString end_label)))
                     (open_tag:HTMLTag* (if (null? closing_tag) (convert 0) (tref closing_tag 1))))
                (SSBReset end_label)
                (if (and (not (null? closing_tag)) (or (equal (Str "HTML") (tref closing_tag 0)) (equal (Str "html") (tref closing_tag 0))))
                    open_tag
                    (cond
                     ((null? open_tag) ;; this must be a stray end tag, for example </br>. Ignore it, return parsing to parent
                      (parse_html_branch tag child_label 0 char_stream eof))
                     (else
                      (let ((new_child_label (StringStreamBuffer_c 256)))
                        (SSBReset attribute_name) (SSBReset attribute_value)
                        (parse_html_branch open_tag new_child_label 0 char_stream eof)))))))
             (else
              (set! end_label (SSBWrite end_label c))
              (parse_html_branch tag child_label 4 char_stream eof))))
           ((= mode 3) ;; in attributes section of tag
            (cond
             ((= c htmlTagClose) ;;  finalise attribute and create a new tag object
              (if (nontrivial attribute_name)
                  (begin
                    (printf "\n~~~~~~ <%s %s=%c%s%c ~~~~~~\n" (cstring (label tag)) (cstring attribute_name) htmlTagDoubleQuote (cstring attribute_value) htmlTagDoubleQuote)
                    (attributes tag (cons (Pair (toString attribute_name) (toString attribute_value)) (attributes tag)))))
              (SSBReset attribute_name)
              (SSBReset attribute_value)
              (let ((child:HTMLTag* (HTMLTag (toString child_label) tag (convert null) (convert null) (StringStreamBuffer_c 256)))
                    (grandchild_label (StringStreamBuffer_c 256)))
                (SSBReset child_label)
                ;;(printf "Adding child %s to %s\n" (cstring (label child)) (cstring (label tag)))
                (children tag (cons child (children tag)))
                (set! content (SSBWrite content ybotHtmlPlaceHolder))
                (parse_html_branch child grandchild_label 0 char_stream eof)
                (parse_html_branch tag child_label 0 char_stream eof)))
             ((= c htmlTagEquals)
              ;(printf "\nForming attribute value: ")
              (parse_html_branch tag child_label -3 char_stream eof))
             ((= c htmlTagSeparator)
              (printf "\n****** <%s %s=%c%s%c> ******\n" (cstring (label tag)) (cstring attribute_name) htmlTagDoubleQuote (cstring attribute_value) htmlTagDoubleQuote)
              (attributes tag (cons (Pair (toString attribute_name) (toString attribute_value)) (attributes tag)))
              (SSBReset attribute_name)
              (SSBReset attribute_value)
              ;;(printf "\nForming attribute name: ")
              (parse_html_branch tag child_label 3 char_stream eof))
             ((= c htmlTagDoubleQuote)
              (parse_html_branch tag child_label -5 char_stream eof))
             (else
              ;;(printf "%c" c)
              (set! attribute_name (SSBWrite attribute_name c))
              (parse_html_branch tag child_label 3 char_stream eof))))
           ((= mode -3)
            (cond 
             ((= c htmlTagClose) ;;  finalise attribute and create a new tag object
              (if (nontrivial attribute_name)
                  (begin
                    ;;(printf "\n----- %s=%c%s%c -----\n" (cstring attribute_name) htmlTagDoubleQuote (cstring attribute_value) htmlTagDoubleQuote)
                    (attributes tag (cons (Pair (toString attribute_name) (toString attribute_value)) (attributes tag)))))
              (SSBReset attribute_name)
              (SSBReset attribute_value)
              (let ((child:HTMLTag* (HTMLTag (toString child_label) tag (convert null) (convert null) (StringStreamBuffer_c 256)))
                    (grandchild_label (StringStreamBuffer_c 256)))
                (SSBReset child_label)
                ;;(printf "Adding child %s to %s\n" (cstring (label child)) (cstring (label tag)))
                (children tag (cons child (children tag)))
                (set! content (SSBWrite content ybotHtmlPlaceHolder))
                (parse_html_branch child grandchild_label 0 char_stream eof)
                (parse_html_branch tag child_label 0 char_stream eof)))
             ((= c htmlTagSeparator)
              (printf "\n:::::: %s=%c%s%c ::::::\n" (cstring attribute_name) htmlTagDoubleQuote (cstring attribute_value) htmlTagDoubleQuote)
              (attributes tag (cons (Pair (toString attribute_name) (toString attribute_value)) (attributes tag)))
              (SSBReset attribute_name)
              (SSBReset attribute_value)
              (parse_html_branch tag child_label 3 char_stream eof))
             ((= c htmlTagDoubleQuote)
              (parse_html_branch tag child_label -4 char_stream eof))
             (else
              ;;(printf "%c" c)
              (set! attribute_value (SSBWrite attribute_value c))
              (parse_html_branch tag child_label -3 char_stream eof))))
           ((= mode -4)
            (cond
             ((= c htmlTagDoubleQuote)
              (parse_html_branch tag child_label -3 char_stream eof))
             (else
              ;;(printf "%c" c)
              (set! attribute_value (SSBWrite attribute_value c))
              (parse_html_branch tag child_label -4 char_stream eof))))
           ((= mode -5)
            (cond
             ((= c htmlTagDoubleQuote)
              (parse_html_branch tag child_label 3 char_stream eof))
             (else
              ;;(printf "%c" c)
              (set! attribute_name (SSBWrite attribute_name c))
              (parse_html_branch tag child_label -5 char_stream eof))))
           (else
            ;;(printf "Error: illegal mode %lld\n" mode)
            (convert null))))))))
            
          

(bind-func parse_html_file:[HTMLTag*,i8*]*
  (lambda (path)
    (let ((file (yfs_open path)))
      (if (non-null file)
          (let* ((document:HTMLTag* (HTMLTag (String "Doc") (convert null) (convert null) (convert null) (StringStreamBuffer_c 256)))
                 (eof:bool* (zalloc))
                 (label:StringStreamBuffer* (StringStreamBuffer_c 256))
                 (char_stream:[i8,bool*]*
                  (lambda (eof)
                    (yfs_read_byte file eof))))
            (let ((output:HTMLTag* (parse_html_branch document label 0 char_stream eof)))
              (yfs_close file)
              output))
          null))))



(bind-func display_tree:[void,HTMLTag*,i64]*
  (lambda (tag:HTMLTag* depth:i64)
    (let* ((i:i64 0) (j:i64 0)
           (ch:List{HTMLTag*}* (children tag))
           (n:i64 (if (null? ch) 0 (length ch))))
      (dotimes (i depth)
        (printf "  "))
      (printf "<%s>" (cstring (label tag)))
      (for-each (lambda (attr) (printf " %s=%c%s%c" (cstring (first attr)) htmlTagDoubleQuote (cstring (second attr)) htmlTagDoubleQuote)) (attributes tag))
      (printf "</%s>\n" (cstring (label tag)))
      (dotimes (j n)
        (display_tree (nth ch (- n (+ j 1))) (+ depth 1)))
      void)))


(bind-func display_element:[void,HTMLTag*]*
  (lambda (tag)
    (printf "<%s" (cstring (label tag)))
    (for-each (lambda (attr) (printf " %s=%c%s%c" (cstring (first attr)) htmlTagDoubleQuote (cstring (second attr)) htmlTagDoubleQuote)) (attributes tag))
    (printf ">%s</%s>\n" (cstring (contents tag)) (cstring (label tag)))
    void))


(bind-func find_tags_by_label:[List{HTMLTag*}*,HTMLTag*,String*]*
  (lambda (tag target)
    (flatten
     (map
      (lambda (child)
        (if (equal (label child) target)
            (cons child (find_tags_by_label child target))
            (find_tags_by_label child target)))
      (children tag)))))


;;;;;;;;;;;;; testing ;;;;;;;;;;;;;;;;;;
(bind-func test_search2
  (lambda (path name)
    (let ((matches (find_tags_by_label (parse_html_file path) (Str name))))
      (printf "Number of matches: %lld\n" (length matches))
      (for-each display_element matches)
      (length matches))))




(bind-func test_parse
  (lambda (path)
    (display_tree (parse_html_file path) 0)
    #t))


(bind-func double_search
  (lambda (path name1 name2)
    (let ((matches1 (find_tags_by_label (parse_html_file path) (Str name1))))
      (if (non-empty matches1)
          (let ((matches2 (find_tags_by_label (car  (last matches1)) (Str name2))))
            (for-each display_element matches2)
            (length matches2))
          0))))

    

(test_parse "papers/0086/index.html")
    
(test_search2 "papers/0086/index.html" "p")

(double_search "papers/0086/index.html" "BODY" "p")
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
